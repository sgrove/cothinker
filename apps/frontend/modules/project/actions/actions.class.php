<?php
// auto-generated by sfPropelCrud
// date: 2008/04/03 03:08:20
?>
<?php

/**
 * project actions.
 *
 * @package    cothink
 * @subpackage project
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class projectActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('project', 'list');
  }

  public function executeList()
  {
    $this->tab = sfConfig::get('app_tab_projects_browse');

    $this->logMessage('get pager....');
    $this->projects = ProjectPeer::retrievePager(new Criteria(), $this->getRequestParameter('page', 1), $this->getRequestParameter('max', sfConfig::get('app_pager_project_max')));

    $this->campuses = CampusPeer::retrieveAlphabetical();
    $this->departments = DepartmentPeer::retrieveAlphabetical();
    
    myToolkit::prependPageTitle('Community Projects'); 
  }

  /**
   * Executes Favorites action
   *
   */
  public function executeFavorites()
  {
    $this->tab = sfConfig::get('app_tab_projects_favorites');
    
    $this->projects = ProjectPeer::retrievePagerByUserStarred($this->getUser()->getId(), $this->getRequestParameter('page', 1), $this->getRequestParameter('max', sfConfig::get('app_pager_project_max')));
    $this->logMessage('pager retrieved for user '.$this->getUser()->getId().'...');

    $this->campuses = CampusPeer::doSelect(new Criteria());
    $this->departments = DepartmentPeer::doSelect(new Criteria());
    
    myToolkit::prependPageTitle('Projects You Favorited');
  }
  /**
   * Executes myProjects action
   *
   */
  public function executeMyProjects()
  {
    $this->projects = ProjectPeer::retrievePagerByUser($this->getUser()->getID(), $this->getRequestParameter('page', 1), $this->getRequestParameter('max', sfConfig::get('app_pager_project_max')));
  }

  public function executeAjaxProjectPager()
  {
    $this->section = $this->getRequestParameter('section', sfConfig::get('app_tab_projects_browse'));

    $owner = $this->getRequestParameter('project_owner', 'null');
    $title = $this->getRequestParameter('project_title', 'null');
    $keywords = $this->getRequestParameter('project_keywords', 'null');
    $school = $this->getRequestParameter('project_school', 'null');
    $status = $this->getRequestParameter('project_status', 'null');
    $department = $this->getRequestParameter('project_department', 'null');
    $applications = $this->getRequestParameter('project_applications', 'null');

    $c = new Criteria();
    
    $this->uri_options = '';
    
    if ($title != "null"  && $title != '')
    {
      $this->logMessage('title not null, setting: ['.$title.']');
      $c->add(ProjectPeer::TITLE, "%".$title."%", Criteria::LIKE);
      $this->uri_options .= '&project_title='.urlencode($title);
    }
    //URI: project_title=C&project_status=&project_department=
    //URI: project_title=C&project_status=project_department&project_department=
    if ($status != "null" && $status != '')
    {
      $this->logMessage('status not null, setting: ['.$status.']');
      $c->add(ProjectPeer::STATUS, $status);
      $this->uri_options .= '&project_status='.urlencode($status);
    }
    
    if ($department != "null" && $department != '')
    {
      $this->logMessage('department not null, setting: ['.$department.']');
      $c->add(ProjectPeer::DEPARTMENT_ID, $department);
      $this->uri_options .= '&project_department='.urlencode($department);
    }

    if ($applications != "null" && $applications != '')
    {
      $this->logMessage('applications not null, setting: ['.$applications.']');
      $c->add(ProjectPeer::APPLICATIONS, $applications);
      $this->uri_options .= '&project_applications='.urlencode($applications);
    }

    if ($school != "null" && $school != '')
    {
      $this->logMessage('school not null, setting: ['.$school.']');
      $c->add(ProjectPeer::CAMPUS_ID, $school);
      $this->uri_options .= '&project_school='.urlencode($school);
    }

    if ($owner != "null" && $owner != '')
    {
      $this->logMessage('owner not null, setting: ['.$owner.']');
      //$c->add(ProjectPeer::, "%".$title."%", Criteria::LIKE);
      //$this->uri_options .= '&project_school='.urlencode($school);
    }
    
    $this->uri_options .= '&section='.$this->section;


    //$this->projects = ProjectPeer::doSelect(new Criteria());  
    $this->logMessage('get pager....');
    
    if ($this->section == sfConfig::get('app_tab_projects_browse'))     { $this->logMessage('browse tab...'); $this->projects = ProjectPeer::retrievePager($c, $this->getRequestParameter('page', 1), $this->getRequestParameter('max', sfConfig::get('app_pager_project_max'))); }
    if ($this->section == sfConfig::get('app_tab_projects_myprojects')) { $this->logMessage('browse tab...'); $this->projects = ProjectPeer::retrievePagerByUser($this->getUser()->getID(), $this->getRequestParameter('page', 1), $this->getRequestParameter('max', sfConfig::get('app_pager_project_max'))); }
    if ($this->section == sfConfig::get('app_tab_projects_favorited'))  { $this->logMessage('browse tab...'); $this->projects = ProjectPeer::retrievePagerByUserStarred($this->getUser()->getId(), $this->getRequestParameter('page', 1), $this->getRequestParameter('max', sfConfig::get('app_pager_project_max'))); }
    
    $this->logMessage('pager retrieved....');
    $this->logMessage('uri: ['.$this->uri_options.']');
    $this->uri_options = str_replace('?&', '?', $this->uri_options);
    $this->logMessage('uri: ['.$this->uri_options.']');
  }

  public function _executeShow()
  {
  }
  
  /**
   * Executes showMain action
   *
   */
  public function executeShowMain()
  {
    $this->forward404Unless($this->project = ProjectPeer::retrieveBySlug($this->getRequestParameter('project')), 'Project does not exist, using slug ['.$this->getRequestParameter('project').']');
    $this->tab = sfConfig::get('app_tab_project_main');
    
    myToolkit::prependPageTitle("Project ".$this->project->getTitle());
    
    // Sanity check
    if ($this->project->getForm('main') == null) {
      $this->project->setDefaultForm('main');
    }
  }
  
  /**
   * Executes showTasks action
   *
   */
  public function executeShowTasks()
  {
    $this->forward404Unless($this->project = ProjectPeer::retrieveBySlug($this->getRequestParameter('project')), 'Project does not exist, using slug ['.$this->getRequestParameter('project').']');
    $this->tab = sfConfig::get('app_tab_project_tasks');

    $raw_users = $this->project->getUsers();
    $users = array();
    
    foreach($raw_users as $raw_user)
    {
      $users[$raw_user->getUuid()] = $raw_user->getFullName();
    }
    
    $this->users = $users;

    myToolkit::prependPageTitle('Task List for project "'.$this->project->getTitle().'"');
  }
  
  /**
   * Executes showTeam action
   *
   */
  public function executeShowTeam()
  {
    $this->forward404Unless($this->project = ProjectPeer::retrieveBySlug($this->getRequestParameter('project')), 'Project does not exist, using slug ['.$this->getRequestParameter('project').']');
    $this->tab = sfConfig::get('app_tab_project_team');
    
    myToolkit::prependPageTitle('Team for project "'.$this->project->getTitle().'"');
  }
  
  /**
   * Executes showForums action
   *
   */
  public function executeShowForums()
  {
    $this->forward404Unless($this->project = ProjectPeer::retrieveBySlug($this->getRequestParameter('project')), 'Project does not exist, using slug ['.$this->getRequestParameter('project').']');
    $this->tab = sfConfig::get('app_tab_project_forums');
    
    myToolkit::prependPageTitle('Forums for project "'.$this->project->getTitle().'"');
  }

  // Using UUID for lookup until the project is complete. Elsewhere uses slug.
  public function executeCreate()
  {
    $this->tab = sfConfig::get('app_tab_project_create');
    
    $this->project = new ProjectApplication();
  }
  
  /**
   * Executes createDescription action
   *
   */
  public function executeCreateDescription()
  {
    $this->tab = sfConfig::get('app_tab_project_create');
    
      $projectApplication = ProjectApplicationPeer::retrieveByUuid($this->getRequestParameter('id'));
      if ($projectApplication == null) {
        $projectApplication = new ProjectApplication();
      }
      
      $this->project = $projectApplication;
      $this->campuses = CampusPeer::doSelect(new Criteria());
  }
  
  /**
   * Handles createSaveDescription action
   *
   */
  public function handleErrorCreateSaveDescription()
  {
    $projectApplication = ProjectApplicationPeer::retrieveByUuid($this->getRequestParameter('id'));
    if ($projectApplication == null) {
      $projectApplication = new ProjectApplication();
    }
    
    $this->project = $projectApplication;
    $this->campuses = CampusPeer::doSelect(new Criteria());
    
    $this->setTemplate('createDescription');
    
    return sfView::SUCCESS;
  }
  
  /**
   * Executes createSaveDescription action
   *
   */
  public function executeCreateSaveDescription()
  {
    if ($this->getRequest()->getMethod() == sfRequest::POST) {
      $this->logMessage('Checking to see if project exists...');
      $projectApplication = ProjectApplicationPeer::retrieveByUuid($this->getRequestParameter('id'));
      
      //$this->forward404Unless($projectApplication != null, 'Project not found using uuid ['.$this->getRequestParameter('id').']');
      
      if ($projectApplication == null) {
        $this->logMessage('Project not found using uuid of ['.$this->getRequestParameter('id').']');
        $projectApplication = new ProjectApplication();
        
        $projectApplication->setStatus(sfConfig::get('app_project_application_status_unapproved'));
      }

      //todo: add tag support      
      $projectApplication->setDepartmentId($this->getRequestParameter('department_id'));
      $projectApplication->setTitle($this->getRequestParameter('title'));
      $projectApplication->setDescription($this->getRequestParameter('description'));
      $projectApplication->setNotes($this->getRequestParameter('notes'));
      $projectApplication->setCampusId($this->getRequestParameter('campus'));
      
      $projectApplication->setCommunityBenefits($this->getRequestParameter('community_benefits'));
      $projectApplication->setStudentReasons($this->getRequestParameter('student_reasons'));
      
      $projectApplication->setOwnerId($this->getUser()->getId());
      
      $projectApplication->setPage1Complete( true );
      
      $projectApplication->save();
  
      $projectApplication = ProjectApplicationPeer::retrieveByPk($projectApplication->getId());

      $this->setFlash('id', $projectApplication->getUuid());

      //echo $this->getController()->genUrl('@create_project_step2?id='.$projectApplication->getUuid(), true);
      $this->redirect('@create_project_step2?id='.$projectApplication->getUuid());
    }
    
    $this->forward404('not a post request, something is strange');
    
  }
  
  /**
   * Executes createDetails action
   *
   */
  public function executeCreateDetails()
  {
    $this->tab = sfConfig::get('app_tab_projects_create');
    
    if ($this->hasFlash('id')) {
      $projectApplication = ProjectApplicationPeer::retrieveByUuid($this->getFlash('id'));
    }
    else {
      $projectApplication = ProjectApplicationPeer::retrieveByUuid($this->getRequestParameter('id'));
    }
    
    if ($projectApplication == null) {
      $this->forward404('Not a POST request, and project not found with UUID: ['.$this->getRequestParameter('id').']');
    }
    
    $this->project = $projectApplication;
  }
  
  /**
   * Executes createSaveDetails action
   *
   */
  public function executeCreateSaveDetails()
  {
    if ($this->getRequest()->getMethod() == sfRequest::POST) {
      $projectApplication = ProjectApplicationPeer::retrieveByUuid($this->getRequestParameter('id'));
      if ($projectApplication == null) {
        $this->forward404('Project not found using uuid: ['.$this->getRequestParameter('id').']');
      }

      //todo: add tag support      
      $projectApplication->setLength($this->getRequestParameter('length'));
      $projectApplication->setProfit($this->getRequestParameter('profit'));
      $projectApplication->setProfitDetails($this->getRequestParameter('profit_details'));
      $projectApplication->setLiability($this->getRequestParameter('liability'));
      $projectApplication->setLiabilityDetails($this->getRequestParameter('liability_details'));

      $projectApplication->setPage2Complete( true );
      
      $projectApplication->save();
      
      $projectApplication = ProjectApplicationPeer::retrieveByPk($projectApplication->getId());
      
      $this->setFlash('id', $projectApplication->getUuid());
      
      $this->redirect('@create_project_step3?id='.$projectApplication->getId());
    }
    
    $this->forward404('not a post request, something is strange');
  }

  /**
   * Handles createSaveDetails action
   *
   */
  public function handleErrorCreateSaveDetails()
  {
    $projectApplication = ProjectApplicationPeer::retrieveByUuid($this->getRequestParameter('id'));
    if ($projectApplication == null) {
      $this->forward404('project not found using uuid');
    }
    
    $this->project = $projectApplication;
    
    $this->setTemplate('createDetails');
    
    return sfView::SUCCESS;
  }

  /**
   * Handles createSaveTimeline error action
   *
   */
  public function handleErrorCreateSaveTimeline()
  {
    $projectApplication = ProjectApplicationPeer::retrieveByUuid($this->getRequestParameter('id'));
    if ($projectApplication == null) {
      $this->forward404('project not found using uuid');
    }
    
    $this->project = $projectApplication;
    
    $this->setTemplate('createTimeline');
    
    return sfView::SUCCESS;
  }
  
  /**
   * Executes createSaveTimeline action
   *
   */
  public function executeCreateSaveTimeline()
  {
    if ($this->getRequest()->getMethod() == sfRequest::POST) {
      $projectApplication = ProjectApplicationPeer::retrieveByUuid($this->getRequestParameter('id'));
      if ($projectApplication == null) {
        $this->forward404('Project not found using uuid: ['.$this->getRequestParameter('id').']');
      }

      //todo: add tag support      
      $projectApplication->setPreferredTermLength($this->getRequestParameter('preferred_term_length'));
      $projectApplication->setLength($this->getRequestParameter('length'));

      $projectApplication->setPage3Complete( true );
      
      $projectApplication->save();
      
      $projectApplication = ProjectApplicationPeer::retrieveByPk($projectApplication->getId());
      
      $this->setFlash('id', $projectApplication->getUuid());
      
      $this->redirect('@create_project_submit?id='.$projectApplication->getUuid());
    }
    
    $this->forward404('not a post request, something is strange');

  }
  
  /**
   * Executes createTimeline action
   *
   */
  public function executeCreateTimeline()
  {
    $this->tab = sfConfig::get('app_tab_projects_create');
    
    if ($this->hasFlash('id')) {
      $projectApplication = ProjectApplicationPeer::retrieveByUuid($this->getFlash('id'));
    }
    else {
      $projectApplication = ProjectApplicationPeer::retrieveByUuid($this->getRequestParameter('id'));
    }
    
    if ($projectApplication == null) {
      $this->forward404('Not a POST request, and project not found with UUID: ['.$this->getRequestParameter('id').']');
    }
    
    $this->project = $projectApplication;
  }
  
  /**
   * Executes createReview action
   *
   */
  public function executeCreateReview()
  {
    $this->tab = sfConfig::get('app_tab_projects_create');
    
    if ($this->hasFlash('id')) {
      $projectApplication = ProjectApplicationPeer::retrieveByUuid($this->getFlash('id'));
    }
    else {
      $projectApplication = ProjectApplicationPeer::retrieveByUuid($this->getRequestParameter('id'));
    }
    
    if ($projectApplication == null) {
      $this->forward404('Not a POST request, and project not found with UUID: ['.$this->getRequestParameter('id').']');
    }
    
    $this->project = $projectApplication;    
  }
  
  /**
   * Executes SubmitProjectApplication action
   *
   */
  public function executeSubmitProjectApplication()
  {
    //TODO: Add proper security checks here so not just anyone can submit apps

    $this->tab = sfConfig::get('app_tab_projects_create');

    $this->forward404Unless($projectApplication = ProjectApplicationPeer::retrieveByUuid($this->getRequestParameter('id')), 'ProjectApp not found using Uuid: ['.$this->getRequestParameter('id').']');
    
    $projectApplication->setStatus(sfConfig::get('app_project_application_status_pending'));
    
    $projectApplication->save();
    
    $this->projectApplication = $projectApplication;

  }

  /**
   * Executes removeApplication action
   *
   */
  public function executeRemoveApplication()
  {
    $this->forward404Unless($projectApplication = ProjectApplicationPeer::retrieveByUuid($this->getRequestParameter('id')), 'Project Application not found, unable to delete (using ['.$this->getRequestParameter('id').'])');
    
    if ($projectApplication->getOwnerId() == $this->getUser()->getId()) {
      $projectApplication->delete();
    }
    
    $this->redirect($this->getRequest()->getReferer());
  }
  /**
   * Executes previewApplication action
   *
   */
  public function executePreviewApplication()
  {
    $this->forward404Unless($this->project = ProjectApplicationPeer::retrieveByUuid($this->getRequestParameter('id')));
    $this->tab = sfConfig::get('app_tab_projects_create');
  }
  
  public function executeAddPosition()
  {
    $project = ProjectPeer::retrieveBySlug($this->getRequestParameter('slug'));
    $this->forward404Unless($project, 'Project not found');
    
    $position = new ProjectPosition();
    
    $position->setTitle($this->getRequestParameter('title'));
    $position->setDescription($this->getRequestParameter('description'));
    $position->setQualifications($this->getRequestParameter('qualifications'));
    $position->setProjectId($project->getId());
    
    $position->setStatus(sfConfig::get('app_project_position_status_open'));
    $position->save();
    
    $this->project = $project;
    $this->redirect('project/show?tab=team&slug='.$project->getSlug());
  }

  public function executeRemovePosition()
  {
    $project = ProjectPeer::retrieveBySlug($this->getRequestParameter('slug'));
    $this->forward404Unless($project, 'Project not found');
    
    $position = ProjectPositionPeer::retrieveByUuid($this->getRequestParameter('position'));
    $this->forward404Unless($position, 'Position not found');

    if ($position->isFilled())
    {
      $this->logMessage('Position not empty, cannot remove');
      $this->redirect($this->getRequest()->getReferer());
    }
    
    if ($project->hasPermission('handle-applications', $this->getUser()->getId()))
    {
      $position->delete();
      $this->logMessage('Position removed');
    }
    
    $this->project = $project;
    $this->redirect($this->getRequest()->getReferer());
  }
  
  /**
   * Executes addPositionMilestone action
   *
   */
  public function executeAddPositionMilestone()
  {
    $this->forward404Unless($position = ProjectPositionPeer::retrieveByUuid($this->getRequestParameter('milestone_position')));
    //$this->forward404Unless($this->getUser()->isAuthenticated() && $position->getProject()->isAdmin($this->getUser()->getId()), 'Not authorized'); 
    
    $milestone = new PositionMilestone();
    
    $milestone->setTitle($this->getRequestParameter('milestone_title'));
    $milestone->setDescription($this->getRequestParameter('milestone_description'));
    $milestone->setDeliverables($this->getRequestParameter('milestone_deliverables'));
    $milestone->setDeadline($this->getRequestParameter('milestone_deadline'));
    
    $milestone->setPositionId($position->getId());
    
    $milestone->save();
    
    $this->milestone = $milestone;
    $this->position = $position;
    
  }

  public function executeEdit()
  {
    $this->forward404Unless($this->project = ProjectPeer::retrieveBySlug($this->getRequestParameter('project')), 'Project does not exist, using slug ['.$this->getRequestParameter('project').']');
    $this->forward404Unless($this->project->isAdmin(), 'Project non-existant or not admin, unable to edit');

    $this->tab = sfConfig::get('app_tab_project_edit');

    $this->newPosition = new ProjectPosition();
    $this->campuses = CampusPeer::doSelect(new Criteria());
    
    myToolkit::prependPageTitle('Editing details for project "'.$this->project->getTitle().'"');
    
  /***********
	
	As a kind of cacheing mechanism we're going to get all of the users of the project once 
	and pass them on to our tasks module (possibly the positions module as well)
	
	***********/
	
    //$this->projectUsers = $this->project->getApprovedUsers();
  }

  /**
   * Executes AdminEdit action
   *
   */
  public function executeAdminEdit()
  {
    $this->project = ProjectPeer::retrieveByPk($this->getRequestParameter('slug'));
    $this->forward404Unless($this->project && $this->project->isAdmin());
  }

  public function executeSaveNew()
  {
    $project = new Project();

    $culture = $this->getUser()->getCulture();
    // TODO: Implement multiple owners / project leads, if necessary

    $project->setCreatedBy($this->getUser()->getGuardUser()->getId());
    $project->setOwnerId($this->getUser()->getGuardUser()->getId());
    $project->setDepartmentId($this->getRequestParameter('department_id') ? $this->getRequestParameter('department_id') : null);
    $project->setTitle($this->getRequestParameter('title'));
    $project->setDescription($this->getRequestParameter('description'));
    $project->setNotes($this->getRequestParameter('notes'));
    $project->setKeywords($this->getRequestParameter('tags_as_text'));

    if ($this->getRequestParameter('begin'))
    {
      list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('begin'), $this->getUser()->getCulture());
      $project->setBegin("$y-$m-$d");
    }
    if ($this->getRequestParameter('finish'))
    {
      list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('finish'), $this->getUser()->getCulture());
      $project->setFinish("$y-$m-$d");
    }
    $this->logMessage('Dates Saved');

    $project->setCampusId($this->getRequestParameter('campus'));
    $project->setPublished($this->getRequestParameter('published', 0));
    
    $project->save();
    $this->logMessage('Project Saved');
    
    $project->createDefaultPermissions();

    return $this->redirect('project/awaitApproval');
  }

  
  public function executeUpdate()
  {
    $project = ProjectPeer::retrieveBySlug($this->getRequestParameter('project'));
    $this->forward404Unless($project, 'Project not found with slug ['.$this->getRequestParameter('project').']');
    $clone_project = $project->copy();

    $culture = $this->getUser()->getCulture();
    // TODO: Implement multiple owners / project leads

    $project->setDepartmentId($this->getRequestParameter('department_id') ? $this->getRequestParameter('department_id') : null);
    $project->setCampusId($this->getRequestParameter('campus'));
    $project->setTitle($this->getRequestParameter('title'));
    $project->setDescription($this->getRequestParameter('description'));
    $project->setNotes($this->getRequestParameter('notes'));
    $project->setKeywords($this->getRequestParameter('tags_as_text'));
    $this->logMessage('Tags Saved');
    
    if ($this->getRequestParameter('begin'))
    {
      list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('begin'), $this->getUser()->getCulture());
      $project->setBegin("$y-$m-$d");
    }
    if ($this->getRequestParameter('finish'))
    {
      list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('finish'), $this->getUser()->getCulture());
      $project->setFinish("$y-$m-$d");
    }
    $this->logMessage('Dates Saved');
    
    //$project->setBudget($this->getRequestParameter('budget'));
    //$project->setStatus($this->getRequestParameter('status'));
    //$project->setApplications($this->getRequestParameter('applications'));
    //$project->setSeason($this->getRequestParameter('season'));
    $this->logMessage('Misc Saved');
    
    if ($this->getRequestParameter('year'))
    {
      $year = $this->getRequestParameter('year');
      $year = '01-01-'.$year;
      $year = date("Y-d-m H:i:s",strtotime($year));
      $project->setYear($year);
      //list($d, $m, $y) = sfI18N::getDateForCulture(date("Y-d-m H:i:s",strtotime($year)), $this->getUser()->getCulture());
      //$this->logMessage('Year-I18N: ['.date("Y-d-m H:i:s",strtotime($year)).']-['.$y.'-'.$m.'-'.$d.']');
      //$project->setYear("$y-$m-$d");
    }
    $this->logMessage('Year set');
    
    //$project->setScale($this->getRequestParameter('scale'));
    //$project->setCommitment($this->getRequestParameter('commitment'));
    $project->setPublished($this->getRequestParameter('published', 0));

    // Track changes using the comparison functions
    $changes = $project->trackChanges($clone_project);
    
    if ($changes != false)
    {
      $text = "The following updates have been made:\n";
      $text .= $changes;
      $project->addHistoryEvent($project->getTitle().' has been updated by '.$this->getUser()->getProfile(), $text);
    }

    $project->save();
    $this->logMessage('Project updated, history event entered');
    
    return $this->redirect('@show_project?project='.$project->getSlug());
  }

  public function executeDelete()
  {
    $this->project = ProjectPeer::retrieveBySlug($this->getRequestParameter('slug'));

    $this->forward404Unless($this->project && $this->project->isAdmin(), 'Project non-existant or not admin, unable to delete');

    $this->project->delete();

    return $this->redirect('project/list');
  }
  
  public function executeAjaxAddPosition()
  {
    $this->forward404Unless($this->getRequest()->isXmlHttpRequest(), 'moo');
    $project = ProjectPeer::retrieveByUuid($this->getRequestParameter('uuid'));
    $this->forward404Unless($project, 'project not found, unable to add position');

    $position = new ProjectPosition();
    $position->setProjectId($project->getId());
    $position->setTitle($this->getRequestParameter('position_title'));
    $position->setQualifications($this->getRequestParameter('position_qualifications'));
    $position->setWeeklyHours($this->getRequestParameter('position_weekly_hours'));
    $position->setStatus(sfConfig::get('app_project_position_status_open'));
    $position->save();
    
    
    $this->newPosition = new ProjectPosition();
    $this->position = $position;
    $this->project = $project;
  }
  
  public function executeAjaxRemovePosition()
  {
    $this->forward404Unless($this->getRequest()->isXmlHttpRequest(), 'moo');
    $position = ProjectPositionPeer::retrieveByUuid($this->getRequestParameter('uuid'));
    $this->forward404Unless($position, 'position not found, unable to remove it - uuid: '.$this->getRequestParameter('uuid'));
    $project = ProjectPeer::retrieveByPk($position->getProjectId());
    
    // TODO: Should probably separate project_user into project_positions, project_applications, and project_user
    // consider this a temporary (but time-consuming) patch
    $position->delete();
    
    $this->newPosition = new ProjectPosition();
    $this->project = $project;
    $this->setTemplate('ajaxAddPosition');
  }

  public function executeAjaxSetPositionStatus()
  {
    $this->forward404Unless($this->getRequest()->isXmlHttpRequest(), 'moo');
    $position = ProjectPositionPeer::retrieveByUuid($this->getRequestParameter('position'));
    $this->forward404Unless($position, 'position not found, unable to set status');
    
    $status = $this->getRequestParameter('position_status', 1);
    $this->forward404Unless(isset($status), 'position status not found, unable to set status');
    
    $project = $position->getProject();

    $position->setStatus($status);
    $position->save();
    
    
    $this->newPosition = new ProjectPosition();
    $this->position = $position;
    $this->project = $project;
    
    $this->setTemplate('ajaxAddPosition');
  }
  
  public function executeAjaxEditPosition()
  {
    // TODO: implement admin check before editing position to prevent cross-project hacking attempts
    $field = $this->getRequestParameter('field');
    $value = strip_tags($this->getRequestParameter('value'));
    $position = ProjectPositionPeer::retrieveByUuid($this->getRequestParameter('position'));
    $this->forward404Unless($position, 'position not found, unable to update');
    
    // TODO: implement type checking for each field - can we use validate with XMLHTTPREQUESTS?
    if ($field == 'title')
    {
      $position->setTitle($value);
      $this->output = $position->getTitle();
    }
    elseif($field == 'qualifications')
    {
      $position->setQualifications($value);
      $this->output = $position->getQualifications();
    }
    elseif($field == 'hours')
    {
      if (is_numeric($value))
      {
        if ($value > 20) { $value = 20; }
      $position->setWeeklyHours($value);
      $this->output = $position->getWeeklyHours();
      }
      else
      {
        $this->output = $position->getWeeklyHours();
      }
    }
    elseif ($field == 'status')
    {
      $position->setStatus($value);
    }
    
    $position->save();

    $this->position = $position;
    $this->setTemplate('ajaxGenericOutput');
  }
  
  public function executeAjaxGenericOutput()
  {
    
  }
  
  /**
   * Executes ajaxAddTask action
   *
   */
  public function executeAjaxAddTask()
  {
    $project = ProjectPeer::retrieveByUuid($this->getRequestParameter('project'));
    // TODO: make sure user is a member of project
    $this->forward404Unless($project, 'Project not found, or user is not member, unable to add task');
    
    // TODO: add validation for task input
    $task = new Task();
    $task->setProjectId($project->getId());
    $task->setOwnerId($this->getUser()->getProfile()->getUserID());
    $task->setName($this->getRequestParameter('task_name', 'Task Name'));
    $task->setDescription($this->getRequestParameter('task_description', 'Task Description'));
    $task->setBegin($this->getRequestParameter('task_begin'));
    $task->setFinish($this->getRequestParameter('task_finish'));
    $task->setStatus(sfConfig::get('app_task_status_open'));
    $task->setPriority($this->getRequestParameter('priority'));

    $user = sfGuardUserProfilePeer::retrieveByUuid($this->getRequestParameter('task_user'));
    if ($user != null) $task->addUser($user->getUserId());
    
    try{
      $task->save();
    }
    catch(Exception $e)
    {
      $this->logMessage('Saving task failed');
    }
    
    $this->project = $project;
  }

  public function executeAddTask()
  {
    $project = ProjectPeer::retrieveByUuid($this->getRequestParameter('slug'));
    // TODO: make sure user is a member of project
    $this->forward404Unless($project, 'Project not found, or user is not member, unable to add task');
    $this->forward404Unless($user = sfGuardUserProfilePeer::retrieveByUuid($this->getRequestParameter('task_user'), 'Unable to retrieve user'));
    
    // TODO: add validation for task input
    $task = new Task();
    $task->setProjectId($project->getId());
    $task->setOwnerId($this->getUser()->getProfile()->getUserID());
    $task->setName($this->getRequestParameter('name', 'Task Name'));
    $task->setDescription($this->getRequestParameter('description', 'Task Description'));
    if ($this->getRequestParameter('begin'))
    {
      list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('begin'), $this->getUser()->getCulture());
      $task->setBegin("$y-$m-$d");
    }
    if ($this->getRequestParameter('finish'))
    {
      list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('finish'), $this->getUser()->getCulture());
      $task->setFinish("$y-$m-$d");
    }
    $task->setStatus(sfConfig::get('app_task_status_open'));
    $task->setPriority($this->getRequestParameter('priority'));

    $task->save();
    
    //if ($user != null) $task->addUser($user->getUserId());
    $task->addUser($user->getUserId());
    
    
    
    $this->redirect('@show_project_tasks?tab=tasks&project='.$project->getSlug());
  }

  public function executeAjaxAssignTaskUsers()
  {
    $task = TaskPeer::retrieveByUuid($this->getRequestParameter('task'));
    $user_ids = $this->getRequestParameter('taskusers', array());
    
    $this->forward404Unless($task, 'Task not found, unable to assign users');
    
    $this->output = '';
    $users = array();
    // TODO: send message to alert users if they have been added or removed from task
    // TODO: make sure users passed is correct
    $task->clearUsers();
    foreach($user_ids as $user_id)
    {
      $user = sfGuardUserProfilePeer::retrieveByUuid($user_id);
      $this->logMessage('assigning task-user ['.$task->getName().']:['.$user->getFullName().']');
      $task->addUser($user);
    }
    
    $this->task = $task;
    $this->projectUsers = $this->task->getProject()->getApprovedUsers();
    //$this->setTemplate('ajaxGenericOutput');
  }
  
  public function executeShowTask()
  {
    $this->task = TaskPeer::retrieveByUuid($this->getRequestParameter('task'));
    $this->forward404Unless($this->task, 'Task not found');
    
    $this->tab = sfConfig::get('app_tab_project_tasks');
    
    $this->project = $this->task->getProject();
    
    myToolkit::prependPageTitle($this->task->getName().sfConfig::get("app_site_title_delimiter").' Task for project "'.$this->project->getTitle().'"');
  }
  
  public function executeApply()
  {
    $this->forward404Unless($this->getUser()->isAuthenticated(), 'User not logged in, unable to apply for project position');
    $user = $this->getUser()->getProfile();
    
    $position = ProjectPositionPeer::retrieveByUuid($this->getRequestParameter('position'));
    $this->forward404Unless($position, 'Position not found, unable to apply for position');
    
    $projectUser = new ProjectUser();
    $projectUser->setUserId($user->getUserId());
    $projectUser->setPositionId($position->getId());
    $projectUser->setStatus(sfConfig::get('app_project_user_status_pending')); // Status(3): pending review
    
    $projectUser->save();
    
    // Alert the project owner of the application
    $profile = $position->getProject()->getSfGuardUserRelatedByOwnerId()->getProfile();
    $profile->addHistoryEvent('New application for project "'.$position->getProject().'"', $this->getUser()->getProfile().' has applied for a project you currently own. '.ucfirst($profile->getGenderSubject()).' would like to join your project as "'.$position->getTitle().'". Please review the application using the applicaiton manager found on the project\'s page.', 'projects');
    
    $this->position = $position;
    $this->projectUser = $projectUser;
  }
  
  public function executeApplyForm()
  {
    $this->forward404Unless($this->position = ProjectPositionPeer::retrieveByUuid($this->getRequestParameter('position')));
    $this->project = $this->position->getProject();
    
    // If the application was submitted
    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {
      if (!$this->position->isApplicant($this->getUser()->getId()))
      {
        $application = new PositionApplication();
        $application->setInterest($this->getRequestParameter('interest'));
        $application->setQualification($this->getRequestParameter('qualification'));
        $application->setNotes($this->getRequestParameter('notes'));
        $application->setStatus(sfConfig::get('app_position_application_status_pending'));
        $application->setPositionId($this->position->getId());
        $application->setUserId($this->getUser()->getId());
        
        $application->save();
      
        $this->project->handleNewApplicant($this->position->getId(), $this->getUser()->getId());
      }
      
      $this->setTemplate('apply');
      return sfView::SUCCESS;
    }
    
    $this->application = new PositionApplication();
  }
  
  public function executeManageApplications()
  {
    $this->forward404Unless($this->project = ProjectPeer::retrieveBySlug($this->getRequestParameter('slug')));
  }

  public function handleErrorApplyForm()
  {
    $this->forward404Unless($this->position = ProjectPositionPeer::retrieveByUuid($this->getRequestParameter('position')));
    $this->project = $this->position->getProject();
    $this->application = new PositionApplication();

    return sfView::SUCCESS;    
  }
  
  public function executeAjaxAcceptApplicant()
  {
    // TODO: this should probably be moved into the project model code $project->acceptApplication($position, $user)
    //       also, a $project->clonePositionAcceptApplicant($position, $user) could be made to ease the next todo.

    // TODO: allow admin to accept more than one applicant to a position by creating
    // a new position with the same title/qualifications automatically
    $project = ProjectPeer::retrieveByUuid($this->getRequestParameter('project'));
    $this->forward404Unless($project, 'Project not found, unable to accept applicant');

    if ($project->acceptApplicant($this->getRequestParameter('position'), $this->getRequestParameter('user')) == false)
    {
      $this->forward404('Unable to add position, error.');
    }
    
    $this->setTemplate('ajaxAddPosition');
    $this->newPosition = new ProjectPosition();
    $this->project = $project;
    
  }
  
  public function executeAjaxCloneAndAcceptApplicant()
  {
    // TODO: this should probably be moved into the project model code $project->acceptApplication($position, $user)
    //       also, a $project->clonePositionAcceptApplicant($position, $user) could be made to ease the next todo.
    $project = ProjectPeer::retrieveByUuid($this->getRequestParameter('project'));
    $this->forward404Unless($project, 'Project not found, unable to accept applicant');

    if ($project->clonePositionAcceptApplicant($this->getRequestParameter('position'), $this->getRequestParameter('user')) == false)
    {
      $this->forward404('Unable to add position, error.');
    }
    
    $this->setTemplate('ajaxAddPosition');
    $this->newPosition = new ProjectPosition();
    $this->project = $project;
  }
  
  public function executeAjaxSetTaskStatus()
  {
  	//[0]Complete|[1]In Progress|[2]Pending/Planning|(2,+Inf]Unknown task status code
  	$task = TaskPeer::retrieveByUuid($this->getRequestParameter('task'));
  	$this->forward404Unless($task, 'Task not found in action, unable to update status');
  	
  	$status = $this->getRequestParameter('task-status');
  	$this->forward404Unless(is_numeric($status));

  	if ($task->isAuthorized())
  	{
  		$this->logMessage('Unauthorize to make changes to task');
			$task->setStatus($status);
			$task->save();
  	}
  	else
  	{
  		$this->logMessage('Unauthorize to make changes to task');
		}

		$this->task = $task;		
		$this->projectUsers = $this->task->getProject()->getApprovedUsers();
		
  }
  
    public function executeAutoComplete()
    {
      $field = $this->getRequestParameter('field');
      $value = $this->getRequestParameter('project_'.$field);
      $this->forward404Unless($field, 'Either field or value missing');
      
      $c = new Criteria();
      
      switch ($field)
      {
        case 'title':
          $c->add(ProjectPeer::TITLE, "%".$value."%", Criteria::LIKE);
      }
      
      //$c->addLimit(3);
      $c->setIgnoreCase( true );
      $this->searchTerm = $value;
      $this->results = ProjectPeer::doSelect($c);
    }

  public function handleErrorUpdate()
  {
    $this->project = ProjectPeer::retrieveBySlug($this->getRequestParameter('project'));
    $this->forward404Unless($this->project, 'Project not found using slug ['.$this->getRequestParameter('project').']');
    $this->setTemplate('edit');
    return sfView::SUCCESS;
  }
  
  public function handleErrorSaveNew()
  {
    //$this->project = ProjectPeer::retrieveBySlug($this->getRequestParameter('project'));
    //$this->forward404Unless($this->project, 'Project not found using slug ['.$this->getRequestParameter('project').']');
    $this->project = new Project();
    $this->campuses = CampusPeer::doSelect(new Criteria());
    $this->departments = DepartmentPeer::doSelect(new Criteria());
    
    $this->setTemplate('create');
    return sfView::SUCCESS;
  }

  public function executeAwaitApproval()
  {
    
  }
  
  public function executeAddPositionForm()
  {
    
  }
  
  public function executeSetProfilePhoto()
  {
    $photo = sfPhotoGalleryPeer::retrieveByUuid($this->getRequestParameter('photo'));
    $this->forward404Unless($photo, 'Photo not found, unable to set profile photo');
    
    $project = ProjectPeer::retrieveByUuid($this->getRequestParameter('project'));
    $this->forward404Unless($project, 'Project not found, unable to set profile photo');
    
    $project->setPicture($photo->getUuid());
    $project->save();
    
    $this->redirect($this->getRequest()->getReferer());
  }
  
  public function executeRemovePhoto()
  {
    $photo = sfPhotoGalleryPeer::retrieveByUuid($this->getRequestParameter('photo'));
    $this->forward404Unless($photo, 'Photo not found, unable to set profile photo');
    
    $project = ProjectPeer::retrieveByUuid($this->getRequestParameter('project'));
    $this->forward404Unless($project, 'Project not found, unable to set profile photo');
    
    // Make sure photo belongs to project
    if (sfPhotoGalleryPeer::isAttachedToEntity('Project', $project->getId(), $photo->getUuid()))
    {
      // Make sure we update the picture if profile photo
      if ($photo->getUuid() != $project->getPicture())
      {
        $photo->delete();
      }
      else
      {
        $photo->delete();
        $project->setPicture( NULL );
        $project->save();
      }
    }
    
    
    $this->redirect($this->getRequest()->getReferer());
  }
  
  public function executeResources()
  {
    $this->forward404Unless($this->project = ProjectPeer::retrieveBySlug($this->getRequestParameter('slug')));
  }
  
  public function executeApplications()
  {
    $this->forward404Unless($this->project = ProjectPeer::retrieveBySlug($this->getRequestParameter('slug')));
    $this->forward404Unless($this->project->isAuthorized('handle-applications', $this->getUser()->getId()));
  }

  /**
   * Executes ganttChart action
   *
   */
  public function executeGanttChart()
  {
    //@todo change color according to status, and add a legend
    $this->forward404Unless($project = ProjectPeer::retrieveBySlug($this->getRequestParameter('project')));

    $w = 450;

    $graph = new sfJpGraph('gantt',0,0);
    $graph = $graph->getJpGraph();

    $graph->SetShadow();

    // Add title and subtitle
    $graph->title-> Set($project->getTitle());
    //$graph->title-> SetFont( FF_ARIAL, FS_BOLD,12);
    $graph->subtitle-> Set("(Gantt Chart)");

    // Show day, week and month scale
    $graph->ShowHeaders( GANTT_HDAY |  GANTT_HWEEK |  GANTT_HMONTH);

    // Instead of week number show the date for the first day in the week
    // on the week scale
    $graph->scale-> week->SetStyle(WEEKSTYLE_FIRSTDAY);

    // Make the week scale font smaller than the default
    $graph->scale-> week->SetFont(FF_FONT0 );

    // Use the short name of the month together with a 2 digit year
    // on the month scale
    $graph->scale-> month-> SetStyle( MONTHSTYLE_SHORTNAMEYEAR2);

    // Use the short name of the month together with a 4 digit year
    // on the month scale
    $graph->scale-> month-> SetStyle( MONTHSTYLE_SHORTNAMEYEAR4);
    //$graph->scale-> month-> SetTextColor( "white");
    $graph->scale-> month-> SetBackgroundColor( "blue");

    $row = 0;
    foreach ($project->getTasks() as $task) {
      $activity = new GanttBar ($row, $task->getName(), $task->getBegin('Y-m-d'), $task->getFinish('Y-m-d'));
      $activity->SetPattern(BAND_RDIAG, "red" );
      $activity->setFillColor("blue");

      // Finally add the bar to the graph
        $graph->Add( $activity);
      $row++;
    }

    // ... and display it
    $graph->Stroke();
  }
  
  /**
   * Executes showEvents action
   *
   */
  public function executeShowEvents()
  {
    $this->forward404Unless($this->project = ProjectPeer::retrieveBySlug($this->getRequestParameter('project')), 'Project does not exist, using slug ['.$this->getRequestParameter('project').']');
    $this->tab = sfConfig::get('app_tab_project_events');

    myToolkit::prependPageTitle('Calendar for project "'.$this->project->getTitle().'"');
    
    
  }

  /**
   * Executes flagHelp action
   *
   */
  public function executeFlagHelp()
  {
    $this->forward404Unless($projectApplication = ProjectApplicationPeer::retrieveByUuid($this->getRequestParameter('id')), 'Project not found using id: ['.$this->getRequestParameter('id').']');
    
    if ($this->getRequest()->getMethod() == sfRequest::POST && $projectApplication->getOwnerId() == $this->getUser()->getId()) {
      $projectApplication->setFlaggedHelp( true );
      $projectApplication->save();
    }
    
    $this->project = $projectApplication;
  }
  
  /**
   * Executes editPosition action
   *
   */
  public function executeEditPosition()
  {
    $this->forward404Unless($this->project = ProjectPeer::retrieveBySlug($this->getRequestParameter('project')), 'Project does not exist, using slug ['.$this->getRequestParameter('project').']');
    
    $this->tab = sfConfig::get('app_tab_project_team');
    
    $this->position = ProjectPositionPeer::retrieveByUuid($this->getRequestParameter('position'));
    
    if ($this->position == null) {
      $this->position= new ProjectPosition();
    }
    
    $this->position->setProjectId($this->project->getId());
  }
  
  /**
   * Executes updatePosition action
   *
   */
  public function executeUpdatePosition()
  {
    $this->forward404Unless($this->project = ProjectPeer::retrieveBySlug($this->getRequestParameter('project')), 'Project does not exist, using slug ['.$this->getRequestParameter('project').']. Cannot Update Position.');
    
    $this->tab = sfConfig::get('app_tab_project_team');
    
    $this->position = ProjectPositionPeer::retrieveByUuid($this->getRequestParameter('position'));
    $this->positionWasNew = false;
    
    if ($this->position == null) {
      $this->position = new ProjectPosition();
      $this->positionWasNew = true;
    }

    $this->position->setProjectId($this->project->getId());
    $this->position->setTitle($this->getRequestParameter('title'));
    $this->position->setDescription($this->getRequestParameter('description'));
    $this->position->setQualifications($this->getRequestParameter('qualifications'));
    
    $this->position->save();
  }
  
  /**
   * Executes handleErrorUpdatePosition action
   *
   */
  public function handleErrorUpdatePosition()
  {
    $this->forward404Unless($this->project = ProjectPeer::retrieveBySlug($this->getRequestParameter('project')), 'Project does not exist, using slug ['.$this->getRequestParameter('project').']');
    
    $this->tab = sfConfig::get('app_tab_project_team');
    
    $this->position = ProjectPositionPeer::retrieveByUuid($this->getRequestParameter('position'));
    
    if ($this->position == null) {
      $this->position = new ProjectPosition();
    }
    
    $this->setTemplate('updatePosition');
    
    return sfView::SUCCESS;
  }
  
  
  /**
   * Executes updateMilestone action
   *
   */
  public function executeUpdateMilestone()
  {
    $this->forward404Unless($this->project = ProjectPeer::retrieveBySlug($this->getRequestParameter('project')), 'Project does not exist, using slug ['.$this->getRequestParameter('project').']');
    
    $this->tab = sfConfig::get('app_tab_project_team');
    
    $this->forward404Unless($this->position = ProjectPositionPeer::retrieveByUuid($this->getRequestParameter('position')), 'Position not found, unable to add milestone');
    
    $milestone = PositionMilestonePeer::retrieveByUuid($this->getRequestParameter('milestone'));
    
    if ($milestone == null) {
      $milestone = new PositionMilestone();
    }

    $milestone->setTitle($this->getRequestParameter('milestone_title'));
    if ($this->getRequestParameter('milestone_deadline'))
    {
      list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('milestone_deadline'), $this->getUser()->getCulture());
      $milestone->setDeadline("$y-$m-$d");
    }
    
    $milestone->setDescription($this->getRequestParameter('milestone_description'));
    $milestone->setDeliverables($this->getRequestParameter('milestone_deliverables'));

    $milestone->save();
    
    if (sfContext::getInstance()->getRequest()->isXmlHttpRequest()) {
      # Should we do something special here, if the request is ajax? Perhaps we can separate ajax and non-ajax paths here
    }
    
  }

  /**
   * Executes handleErrorUpdateMilestone action
   *
   */
  public function handleErrorUpdateMilestone()
  {
    $this->forward404Unless($this->project = ProjectPeer::retrieveBySlug($this->getRequestParameter('project')), 'Project does not exist, using slug ['.$this->getRequestParameter('project').']');
    
    $this->tab = sfConfig::get('app_tab_project_team');
    
    $this->position = ProjectPositionPeer::retrieveByUuid($this->getRequestParameter('position'));
    
    if ($this->position == null) {
      $this->position = new ProjectPosition();
    }
    
    $this->setTemplate('updateMilestone');
    
    return sfView::SUCCESS;
  }
  
}
