<?php
// auto-generated by sfPropelCrud
// date: 2008/04/03 03:08:20
?>
<?php

/**
 * project actions.
 *
 * @package    cothink
 * @subpackage project
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class projectActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('project', 'list');
  }

  public function executeList()
  {
    $this->tab = $this->getRequestParameter('tab', 'list');
    //$this->projects = ProjectPeer::doSelect(new Criteria());
    $this->logMessage('get pager....');
    if ($this->tab == 'list')       $this->projects = ProjectPeer::retrievePager(new Criteria(), $this->getRequestParameter('page', 1), $this->getRequestParameter('max', sfConfig::get('app_pager_project_max')));
    if ($this->tab == 'myprojects') $this->projects = ProjectPeer::retrievePagerByUser($this->getUser()->getID());
    if ($this->tab == 'favorited')   $this->projects = ProjectPeer::retrievePagerByUserStarred($this->getUser()->getId());
    $this->logMessage('pager retrieved for user '.$this->getUser()->getId().'...');

    $this->campuses = CampusPeer::doSelect(new Criteria());
    $this->departments = DepartmentPeer::doSelect(new Criteria());
  }

  public function executeAjaxProjectPager()
  {
    $owner = $this->getRequestParameter('project_owner', 'null');
    $title = $this->getRequestParameter('project_title', 'null');
    $keywords = $this->getRequestParameter('project_keywords', 'null');
    $school = $this->getRequestParameter('project_school', 'null');
    $status = $this->getRequestParameter('project_status', 'null');
    $department = $this->getRequestParameter('project_department', 'null');
    $applications = $this->getRequestParameter('project_applications', 'null');

    $c = new Criteria();
    
    $this->uri_options = '';
    
    if ($title != "null"  && $title != '')
    {
      $this->logMessage('title not null, setting: ['.$title.']');
      $c->add(ProjectPeer::TITLE, "%".$title."%", Criteria::LIKE);
      $this->uri_options .= '&project_title='.urlencode($title);
    }
    //URI: project_title=C&project_status=&project_department=
    //URI: project_title=C&project_status=project_department&project_department=
    if ($status != "null" && $status != '')
    {
      $this->logMessage('status not null, setting: ['.$status.']');
      $c->add(ProjectPeer::STATUS, $status);
      $this->uri_options .= '&project_status='.urlencode($status);
    }
    
    if ($department != "null" && $department != '')
    {
      $this->logMessage('department not null, setting: ['.$department.']');
      $c->add(ProjectPeer::DEPARTMENT_ID, $department);
      $this->uri_options .= '&project_department='.urlencode($department);
    }

    if ($applications != "null" && $applications != '')
    {
      $this->logMessage('applications not null, setting: ['.$applications.']');
      $c->add(ProjectPeer::APPLICATIONS, $applications);
      $this->uri_options .= '&project_applications='.urlencode($applications);
    }

    if ($school != "null" && $school != '')
    {
      $this->logMessage('school not null, setting: ['.$school.']');
      $c->add(ProjectPeer::CAMPUS_ID, $school);
      $this->uri_options .= '&project_school='.urlencode($school);
    }

    if ($owner != "null" && $owner != '')
    {
      $this->logMessage('owner not null, setting: ['.$owner.']');
      //$c->add(ProjectPeer::, "%".$title."%", Criteria::LIKE);
      //$this->uri_options .= '&project_school='.urlencode($school);
    }

    //$this->projects = ProjectPeer::doSelect(new Criteria());
    $this->logMessage('get pager....');
    $this->projects = ProjectPeer::retrievePager($c, $this->getRequestParameter('page'), $this->getRequestParameter('max', sfConfig::get('app_pager_project_max')));
    $this->logMessage('pager retrieved....');
    $this->logMessage('uri: ['.$this->uri_options.']');
    $this->uri_options = str_replace('?&', '?', $this->uri_options);
    $this->logMessage('uri: ['.$this->uri_options.']');
  }

  public function executeShow()
  {
    $this->project = ProjectPeer::retrieveBySlug($this->getRequestParameter('slug'));
    $this->forward404Unless($this->project);
    //$this->setTemplate('oldShow');
  }

  public function executeCreate()
  {
    $this->project = new Project();
    $this->campuses = CampusPeer::doSelect(new Criteria());
  }

  public function executeEdit()
  {
    $this->project = ProjectPeer::retrieveBySlug($this->getRequestParameter('slug'));
    $this->forward404Unless($this->project && $this->project->isAdmin(), 'Project non-existant or not admin, unable to edit');
    $this->newPosition = new ProjectPosition();
    
  /***********
	
	As a kind of cacheing mechanism we're going to get all of the users of the project once 
	and pass them on to our tasks module (possibly the positions module as well)
	
	***********/
	
    $this->projectUsers = $this->project->getApprovedUsers();
  }

  /**
   * Executes AdminEdit action
   *
   */
  public function executeAdminEdit()
  {
    $this->project = ProjectPeer::retrieveByPk($this->getRequestParameter('slug'));
    $this->forward404Unless($this->project && $this->project->isAdmin());
  }

  public function executeSaveNew()
  {
    $project = new Project();

    $culture = $this->getUser()->getCulture();
    // TODO: Implement multiple owners / project leads

    $project->setCreatedBy($this->getUser()->getGuardUser()->getId());
    $project->setOwnerId($this->getUser()->getGuardUser()->getId());
    $project->setDepartmentId($this->getRequestParameter('department_id') ? $this->getRequestParameter('department_id') : null);
    $project->setTitle($this->getRequestParameter('title'));
    $project->setDescription($this->getRequestParameter('description'));
    $project->setNotes($this->getRequestParameter('notes'));
    $project->setKeywords($this->getRequestParameter('tags_as_text'));

    if ($this->getRequestParameter('begin'))
    {
      list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('begin'), $this->getUser()->getCulture());
      $project->setBegin("$y-$m-$d");
    }
    if ($this->getRequestParameter('finish'))
    {
      list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('finish'), $this->getUser()->getCulture());
      $project->setFinish("$y-$m-$d");
    }
    $this->logMessage('Dates Saved');

    $project->setCampusId($this->getRequestParameter('campus'));
    $project->setPublished($this->getRequestParameter('published', 0));
    
    $project->save();
    $this->logMessage('Project Saved');
    
    $project->createDefaultPermissions();

    // TODO: go to page displaying message about project being reviewed
    return $this->redirect('project/waitApproval');
    //return $this->redirect('project/list');
  }

  
  public function executeUpdate()
  {
    $newProject = false;
    if (!$this->getRequestParameter('slug'))
    {
      $newProject = true;
      $project = new Project();
    }
    else
    {
      $project = ProjectPeer::retrieveBySlug($this->getRequestParameter('slug'));
      $this->forward404Unless($project, 'Project not found with slug ['.$this->getRequestParameter('slug').']');
      $clone_project = $project->copy();
    }

    $culture = $this->getUser()->getCulture();
    // TODO: Implement multiple owners / project leads

    if ($newProject && $this->getUser()->isAuthenticated()) { $project->setCreatedBy($this->getUser()->getGuardUser()->getId()); };
    if ($project->getOwnerId() == null && $this->getUser()->isAuthenticated()) { $project->setOwnerId($this->getUser()->getGuardUser()->getId()); };
    $project->setDepartmentId($this->getRequestParameter('department_id') ? $this->getRequestParameter('department_id') : null);
    $project->setTitle($this->getRequestParameter('title'));
    $project->setDescription($this->getRequestParameter('description'));
    $project->setNotes($this->getRequestParameter('notes'));
    $project->setKeywords($this->getRequestParameter('tags_as_text'));
    $this->logMessage('Tags Saved');
    if ($this->getRequestParameter('begin'))
    {
      list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('begin'), $this->getUser()->getCulture());
      $project->setBegin("$y-$m-$d");
    }
    if ($this->getRequestParameter('finish'))
    {
      list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('finish'), $this->getUser()->getCulture());
      $project->setFinish("$y-$m-$d");
    }
    $this->logMessage('Dates Saved');
    $project->setBudget($this->getRequestParameter('budget'));
    $project->setStatus($this->getRequestParameter('status'));
    $project->setApplications($this->getRequestParameter('applications'));
    $project->setSeason($this->getRequestParameter('season'));
    $this->logMessage('Misc Saved');
    if ($this->getRequestParameter('year'))
    {
      $year = $this->getRequestParameter('year');
      $year = '01-01-'.$year;
      $year = date("Y-d-m H:i:s",strtotime($year));
      $project->setYear($year);
      //list($d, $m, $y) = sfI18N::getDateForCulture(date("Y-d-m H:i:s",strtotime($year)), $this->getUser()->getCulture());
      //$this->logMessage('Year-I18N: ['.date("Y-d-m H:i:s",strtotime($year)).']-['.$y.'-'.$m.'-'.$d.']');
      //$project->setYear("$y-$m-$d");
    }
    $this->logMessage('Year set');
    $project->setScale($this->getRequestParameter('scale'));
    $project->setCommitment($this->getRequestParameter('commitment'));
    $project->setPublished($this->getRequestParameter('published', 0));

    

    if ($newProject == true)
    {
      $project->save();
      $this->logMessage('Project Saved');
      $project->createDefaultPermissions();
    }
    else
    {
      $changes = $project->trackChanges($clone_project);
      $text = "The following updates have been made:\n";
      $text .= explode('\n', $changes);
      $project->addHistoryEvent($project->getTitle().' has been updated by '.$this->getUser()->getProfile(), $text);
      $project->save();
      $this->logMessage('Project updated, history event entered');
    }
    
    // TODO: go to page displaying message about project being reviewed
    return $this->redirect('project/show?slug='.$project->getSlug());
    //return $this->redirect('project/list');
  }

  public function executeDelete()
  {
    $this->project = ProjectPeer::retrieveBySlug($this->getRequestParameter('slug'));

    $this->forward404Unless($this->project && $this->project->isAdmin(), 'Project non-existant or not admin, unable to delete');

    $this->project->delete();

    return $this->redirect('project/list');
  }
  
  public function executeAjaxAddPosition()
  {
    $this->forward404Unless($this->getRequest()->isXmlHttpRequest(), 'moo');
    $project = ProjectPeer::retrieveByUuid($this->getRequestParameter('uuid'));
    $this->forward404Unless($project, 'project not found, unable to add position');

    $position = new ProjectPosition();
    $position->setProjectId($project->getId());
    $position->setTitle($this->getRequestParameter('position_title'));
    $position->setQualifications($this->getRequestParameter('position_qualifications'));
    $position->setWeeklyHours($this->getRequestParameter('position_weekly_hours'));
    $position->setStatus(sfConfig::get('app_project_position_status_open'));
    $position->save();
    
    
    $this->newPosition = new ProjectPosition();
    $this->position = $position;
    $this->project = $project;
  }
  
  public function executeAjaxRemovePosition()
  {
    $this->forward404Unless($this->getRequest()->isXmlHttpRequest(), 'moo');
    $position = ProjectPositionPeer::retrieveByUuid($this->getRequestParameter('uuid'));
    $this->forward404Unless($position, 'position not found, unable to remove it - uuid: '.$this->getRequestParameter('uuid'));
    $project = ProjectPeer::retrieveByPk($position->getProjectId());
    
    // TODO: Should probably separate project_user into project_positions, project_applications, and project_user
    // consider this a temporary (but time-consuming) patch
    $position->delete();
    
    $this->newPosition = new ProjectPosition();
    $this->project = $project;
    $this->setTemplate('ajaxAddPosition');
  }

  public function executeAjaxSetPositionStatus()
  {
    $this->forward404Unless($this->getRequest()->isXmlHttpRequest(), 'moo');
    $position = ProjectPositionPeer::retrieveByUuid($this->getRequestParameter('position'));
    $this->forward404Unless($position, 'position not found, unable to set status');
    
    $status = $this->getRequestParameter('position_status', 1);
    $this->forward404Unless(isset($status), 'position status not found, unable to set status');
    
    $project = $position->getProject();

    $position->setStatus($status);
    $position->save();
    
    
    $this->newPosition = new ProjectPosition();
    $this->position = $position;
    $this->project = $project;
    
    $this->setTemplate('ajaxAddPosition');
  }
  
  public function executeAjaxEditPosition()
  {
    // TODO: implement admin check before editing position to prevent cross-project hacking attempts
    $field = $this->getRequestParameter('field');
    $value = strip_tags($this->getRequestParameter('value'));
    $position = ProjectPositionPeer::retrieveByUuid($this->getRequestParameter('position'));
    $this->forward404Unless($position, 'position not found, unable to update');
    
    // TODO: implement type checking for each field - can we use validate with XMLHTTPREQUESTS?
    if ($field == 'title')
    {
      $position->setTitle($value);
      $this->output = $position->getTitle();
    }
    elseif($field == 'qualifications')
    {
      $position->setQualifications($value);
      $this->output = $position->getQualifications();
    }
    elseif($field == 'hours')
    {
      if (is_numeric($value))
      {
        if ($value > 20) { $value = 20; }
      $position->setWeeklyHours($value);
      $this->output = $position->getWeeklyHours();
      }
      else
      {
        $this->output = $position->getWeeklyHours();
      }
    }
    elseif ($field == 'status')
    {
      $position->setStatus($value);
    }
    
    $position->save();

    $this->position = $position;
    $this->setTemplate('ajaxGenericOutput');
  }
  
  public function executeAjaxGenericOutput()
  {
    
  }
  
  /**
   * Executes ajaxAddTask action
   *
   */
  public function executeAjaxAddTask()
  {
    $project = ProjectPeer::retrieveByUuid($this->getRequestParameter('project'));
    // TODO: make sure user is a member of project
    $this->forward404Unless($project, 'Project not found, or user is not member, unable to add task');
    
    // TODO: add validation for task input
    $task = new Task();
    $task->setProjectId($project->getId());
    $task->setOwnerId($this->getUser()->getProfile()->getUserID());
    $task->setName($this->getRequestParameter('task_name', 'Task Name'));
    $task->setDescription($this->getRequestParameter('task_description', 'Task Description'));
    $task->setBegin($this->getRequestParameter('task_begin'));
    $task->setFinish($this->getRequestParameter('task_finish'));
    $task->setStatus(1);
    
    try{
      $task->addTag(myToolKit::prepareTags($this->getRequestParameter('task_tags', '')));
      $task->save();
    }
    catch(Exception $e)
    {
      $this->logMessage('Saving task failed');
    }
    
    $this->project = $project;
  }
  
  public function executeAjaxAssignTaskUsers()
  {
    $task = TaskPeer::retrieveByUuid($this->getRequestParameter('task'));
    $user_ids = $this->getRequestParameter('taskusers', array());
    
    $this->forward404Unless($task, 'Task not found, unable to assign users');
    
    $this->output = '';
    $users = array();
    // TODO: send message to alert users if they have been added or removed from task
    // TODO: make sure users passed is correct
    $task->clearUsers();
    foreach($user_ids as $user_id)
    {
      $user = sfGuardUserProfilePeer::retrieveByUuid($user_id);
      $this->logMessage('assigning task-user ['.$task->getName().']:['.$user->getFullName().']');
      $task->addUser($user);
    }
    
    $this->task = $task;
    $this->projectUsers = $this->task->getProject()->getApprovedUsers();
    //$this->setTemplate('ajaxGenericOutput');
  }
  
  public function executeApply()
  {
    $this->forward404Unless($this->getUser()->isAuthenticated(), 'User not logged in, unable to apply for project position');
    $user = $this->getUser()->getProfile();
    
    $position = ProjectPositionPeer::retrieveByUuid($this->getRequestParameter('position'));
    $this->forward404Unless($position, 'Position not found, unable to apply for position');
    
    $projectUser = new ProjectUser();
    $projectUser->setUserId($user->getUserId());
    $projectUser->setPositionId($position->getId());
    $projectUser->setStatus(3); // Status(3): pending review
    
    $projectUser->save();
    
    $this->position = $position;
    $this->projectUser = $projectUser;
  }
  
  public function executeAjaxAcceptApplicant()
  {
    // TODO: this should probably be moved into the project model code $project->acceptApplication($position, $user)
    //       also, a $project->clonePositionAcceptApplicant($position, $user) could be made to ease the next todo.

    // TODO: allow admin to accept more than one applicant to a position by creating
    // a new position with the same title/qualifications automatically
    $project = ProjectPeer::retrieveByUuid($this->getRequestParameter('project'));
    $this->forward404Unless($project, 'Project not found, unable to accept applicant');

    if ($project->acceptApplicant($this->getRequestParameter('position'), $this->getRequestParameter('user')) == false)
    {
      $this->forward404('Unable to add position, error.');
    }
    
    $this->setTemplate('ajaxAddPosition');
    $this->newPosition = new ProjectPosition();
    $this->project = $project;
  }
  
  public function executeAjaxCloneAndAcceptApplicant()
  {
    // TODO: this should probably be moved into the project model code $project->acceptApplication($position, $user)
    //       also, a $project->clonePositionAcceptApplicant($position, $user) could be made to ease the next todo.
    $project = ProjectPeer::retrieveByUuid($this->getRequestParameter('project'));
    $this->forward404Unless($project, 'Project not found, unable to accept applicant');

    if ($project->clonePositionAcceptApplicant($this->getRequestParameter('position'), $this->getRequestParameter('user')) == false)
    {
      $this->forward404('Unable to add position, error.');
    }
    
    $this->setTemplate('ajaxAddPosition');
    $this->newPosition = new ProjectPosition();
    $this->project = $project;
  }
  
  public function executeAjaxSetTaskStatus()
  {
  	//[0]Complete|[1]In Progress|[2]Pending/Planning|(2,+Inf]Unknown task status code
  	$task = TaskPeer::retrieveByUuid($this->getRequestParameter('task'));
  	$this->forward404Unless($task, 'Task not found in action, unable to update status');
  	
  	$status = $this->getRequestParameter('task-status');
  	$this->forward404Unless(is_numeric($status));

  	if ($task->isAuthorized())
  	{
  		$this->logMessage('Unauthorize to make changes to task');
			$task->setStatus($status);
			$task->save();
  	}
  	else
  	{
  		$this->logMessage('Unauthorize to make changes to task');
		}

		$this->task = $task;		
		$this->projectUsers = $this->task->getProject()->getApprovedUsers();
		
  }
  
    public function executeAutoComplete()
    {
      $field = $this->getRequestParameter('field');
      $value = $this->getRequestParameter('project_'.$field);
      $this->forward404Unless($field, 'Either field or value missing');
      
      $c = new Criteria();
      
      switch ($field)
      {
        case 'title':
          $c->add(ProjectPeer::TITLE, "%".$value."%", Criteria::LIKE);
      }
      
      //$c->addLimit(3);
      $c->setIgnoreCase( true );
      $this->searchTerm = $value;
      $this->results = ProjectPeer::doSelect($c);
    }

  public function handleErrorUpdate()
  {
    $this->setTemplate('create');
    return sfView::SUCCESS;
  }

  public function executeWaitApproval()
  {
    
  }
}
