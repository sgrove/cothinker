<?php
// auto-generated by sfPropelCrud
// date: 2008/04/13 05:23:51
?>
<?php

/**
 * messages actions.
 *
 * @package    cothink
 * @subpackage messages
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class messagesActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('messages', 'list');
  }

  public function executeList()
  {
    $this->messages = MessagePeer::doSelect(new Criteria());
  }

  public function executeShow()
  {
    $this->message = MessagePeer::retrieveByUuid($this->getRequestParameter('message'));
    $this->forward404Unless($this->message);
  }

  public function executeView()
  {
    $this->message = MessagePeer::retrieveByUUID($this->getRequestParameter('message'));
    
    $this->forward404Unless($this->message);
    
    if (!$this->message->isMyMessage()) { $this->forward404('not your message to view'); }
    
    if (!$this->message->getReadAt()) 
    {
      $this->message->setReadAt(time());
      $this->message->save();
    }
    
    myToolkit::prependPageTitle(ucwords($this->message->getFolder()).sfConfig::get('app_site_title_delimiter').' Messages ');
    
  }

  public function executeReply()
  {
    $parent = MessagePeer::retrieveByUUID($this->getRequestParameter('message'));
    $this->forward404Unless($parent);
    
    $message = $parent->generateReplyMessage();
    
    $this->message = $message;
    $this->recipientUsername = $message->getSfGuardUserRelatedByRecipientId()->getProfile()->getFullName();
    $this->setTemplate('compose');
  }
  
  public function executeCompose()
  {
    $this->message = new Message();
    
    if ($this->getRequestParameter('recipient') != null)
    {
      $recipient = sfGuardUserProfilePeer::retrieveByUuid($this->getRequestParameter('recipient'));
      if ($recipient != null)
      {
        $this->message->setRecipientId($recipient->getUserId());
      }
    }
    
    myToolkit::prependPageTitle("Compose new message ".sfConfig::get('app_site_title_delimiter').' Messages ');
  }

  public function executeCreate()
  {
    $this->message = new Message();

    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
    $this->message = MessagePeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->message);
  }

  public function executeSend()
  {
    // TODO: decide how things can be done as far as sending messages without usernames. Use the prototype.js implementation of facebook's method
    $this->forward404Unless($this->getRequestParameter('user_recipient'), 'no recipient');

    $parent = $this->getRequestParameter('parent_id');
    
    if ($parent != null)
    {
      $parent_message = MessagePeer::retrieveByUUID($parent);
      $recipient = sfGuardUserPeer::retrieveByPk($parent_message->getSenderId());
      $this->forward404Unless($recipient, 'recipient not found');
      $to = $parent_message->getSenderId();
    }
    else
    {
      $recipient = sfGuardUserProfilePeer::retrieveByFullName(trim($this->getRequestParameter('user_recipient')));
      $this->forward404Unless($recipient, 'recipient not found');
      $to = $recipient->getUserId();
      $parent = null;
    }

    $this->forward404Unless($to, 'recipient not found');
    
    $message = array();
    $message["from"] = $this->getUser()->getProfile()->getUserId();
    $message["to"] = $to;
    $message["owner"] = $to;
    $message["parent"] = $parent;
    $message["folder"] = "inbox";
    $message["subject"] = strip_tags($this->getRequestParameter('subject'));
    $message["text"] = strip_tags($this->getRequestParameter('body'));
    
    $options = array();
    $options["copyTo"] = "sent";

    MessagePeer::sendSimpleMessage($message, $options);

    return $this->redirect('messages/showUserMailbox');
  }
  
  public function executeSendDebugEmail()
  {
  	// Test Email setup
  	$user = $this->getUser();
  	
  	// class initialization
  	$mail = new sfEmail();
  	$mail->setCharset('utf-8');
  	
  	// definition of the required parameters
	  $mail->setSender('admin@cothink.org', 'CoThink Admin');
	  $mail->setFrom('admin@cothink.org', 'CoThink Admin');
	  $mail->addReplyTo('admin@cothink.org');
	 
	 // TODO: add primary email field for user profile
	  $mail->addAddress($user->getUsername());
	 
	  $mail->setSubject('What a wonderful debug email');
	 
	  $this->message = "you rarely forget your password. somewhat rarely anyway.";
	  $this->mail = $mail;
  }
  
  public function executeConfirmRegistrationHtml()
  {
    sfPropelApprovableBehavior::disable();
    $this->user = sfGuardUserPeer::retrieveByPK($this->getRequest()->getAttribute('user_id'));
    $this->url = $this->user->getApprovalUrl();
  }

  public function executeConfirmRegistrationText()
  {
    sfPropelApprovableBehavior::disable();
    $this->user = sfGuardUserPeer::retrieveByPK($this->getRequest()->getAttribute('user_id'));
    $this->url = $this->user->getApprovalUrl();
  }
  
  public function executeForgotPasswordHtml()
  {
    sfPropelApprovableBehavior::disable();
    $this->user = sfGuardUserProfilePeer::retrieveByUuid($this->getRequest()->getAttribute('user_id'));
    sfPropelApprovableBehavior::disable();
    $this->token = $this->user->getsfGuardUser()->getToken();
    $this->user = $this->user->getUuid();
  }

  public function executeForgotPasswordText()
  {
    sfPropelApprovableBehavior::disable();
    $this->user = sfGuardUserProfilePeer::retrieveByUuid($this->getRequest()->getAttribute('user_id'));
    sfPropelApprovableBehavior::disable();
    $this->token = $this->user->getsfGuardUser()->getToken();
    $this->user = $this->user->getUuid();
  }
  
  public function executeConfirmRegistrationEmail()
  {
    // TODO: Remove this?
    //  -> This is all in user/register now 
    $this->user = sfGuardUserPeer::retrieveByPk($this->getRequest()->getAttribute('user_id'));
    $this->forward404Unless($this->user, 'user not found, cannot send confirmation registration email');

    $conn   = new Swift_Connection_SMTP( sfConfig::get('mod_sfswiftmailer_smtp_host') );

    // Need auth for SMTP
    $conn->setUsername( sfConfig::get('mod_sfswiftmailer_smtp_user') );
    $conn->setPassword( sfConfig::get('mod_sfswiftmailer_smtp_pass') );

    $mailer = new Swift($conn);

    // Get our message bodies
    $htmlBody = $this->getPresentationFor('messages', 'confirmRegistrationHtml');
    $textBody = $this->getPresentationFor('messages', 'confirmRegistrationText');

      //Create a message
      $message = new Swift_Message("Thank you for joining the Cothink community. Please confirm your email address to complete registration.");
  
      //Add some "parts"
      $message->attach(new Swift_Message_Part($textBody));
      $message->attach(new Swift_Message_Part($htmlBody, "text/html"));

    // Send out our mailer
    $mailer->send($message, $this->user->getUsername(), 'admin@cothink.dyndns.org');
    $mailer->disconnect();

    return sfView:: SUCCESS;
  }

  public function executeDelete()
  {
    $message = MessagePeer::retrieveByUUID($this->getRequestParameter('message'));

    $this->forward404Unless($message);

    if (!$message->isOwner())
    {
      $this->forward404('Not your message to delete');
    }
    
    $message->delete();

    return $this->redirect('messages/showUserMailbox');
  }

  public function executeDeleteMessages()
  {
    $message_list = $this->getRequestParameter('messages');
    
    $messages = array();
    
    foreach($message_list as $id)
    {
      $t_message = MessagePeer::retrieveByUUID($id);
      $this->forward404Unless($t_message, 'One of the messages not found: ['.$id.']');
      $messages[] = $t_message;
    }

    foreach($messages as $message)
    {
      if ($message->isOwner())
      {
        $this->logMessage('deleting msg: ['.$message->getId().']');
        $message->delete();
      }
      else
      {
        $this->forward404('Not your message to delete');
      }
    }
    
    //$this->setTemplate('showUserMailbox');
    return $this->redirect($this->getRequest()->getReferer());
  }

  public function executeShowUserMailbox()
  {
    $this->folder = $this->getRequestParameter('folder');
    
    $this->tab = $this->folder;
    if ($this->tab == 'sent')
    {
      $this->messages = MessagePeer::getUserOutbox($this->getRequestParameter('page'));
    }
    else
    {
      $this->messages = MessagePeer::getUserMailbox($this->tab, $this->getRequestParameter('page'));
    }
    
    myToolkit::prependPageTitle(ucwords($this->folder).sfConfig::get('app_site_title_delimiter').' Messages ');
  }
  
  public function executeShowUserOutbox()
  {
  }
  
  
    public function handleErrorUpdate()
    {
      $this->message = new Message();
      $this->setTemplate('compose');
      return sfView::SUCCESS;
    }
  
  public function handleErrorSend()
  {
    $this->message = new Message();

    if ($this->getRequestParameter('parent_id') != null)
    {
      $parent = MessagePeer::retrieveByUUID($this->getRequestParameter('message'));
      $this->forward404Unless($parent);
      $message = $parent->generateReplyMessage();
    
      $this->message = $message;
      $this->recipientUsername = $message->getSfGuardUserRelatedByRecipientId()->getProfile()->getFullName();
    }

    $this->setTemplate('compose');
    return sfView::SUCCESS;
  }
}
