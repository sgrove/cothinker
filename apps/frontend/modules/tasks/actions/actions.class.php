<?php
// auto-generated by sfPropelCrud
// date: 2008/04/07 23:35:01
?>
<?php

/**
 * tasks actions.
 *
 * @package    cothink
 * @subpackage tasks
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class tasksActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('tasks', 'list');
  }

  public function executeList()
  {
    $this->tasks = TaskPeer::doSelect(new Criteria());
  }

  public function executeShow()
  {
    $this->task = TaskPeer::retrieveByUuid($this->getRequestParameter('task'));
    $this->forward404Unless($this->task);
    
    $this->tab = 'tasks';
  }

  public function executeCreate()
  {
    $this->task = new Task();
    $this->tab = 'tasks';

    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
    $this->task = TaskPeer::retrieveByUuid($this->getRequestParameter('task'));
    $this->forward404Unless($this->task);
    
    $this->tab = 'tasks';
    
    $this->project = $this->task->getProject();
    $raw_users = $this->project->getUsers();
    $users = array();
    
    foreach($raw_users as $raw_user)
    {
      $users[$raw_user->getUuid()] = $raw_user->getFullName();
    }
    
    $this->users = $users;
  }

  public function executeUpdate()
  {
    $task = TaskPeer::retrieveByUuid($this->getRequestParameter('task'));
    $this->forward404Unless($task);
    $this->forward404Unless($task->isAuthorized($this->getUser()->getId()), 'User not authorized to edit tasks for this project');
    
    $project = $task->getProject();

    $task->setName($this->getRequestParameter('name'));
    $task->setDescription($this->getRequestParameter('description'));
    if ($this->getRequestParameter('begin'))
    {
      list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('begin'), $this->getUser()->getCulture());
      $task->setBegin("$y-$m-$d");
    }
    if ($this->getRequestParameter('finish'))
    {
      list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('finish'), $this->getUser()->getCulture());
      $task->setFinish("$y-$m-$d");
    }
    $task->setStatus($this->getRequestParameter('status', sfConfig::get('app_task_status_open')));
    $task->setPriority($this->getRequestParameter('priority'));
    
    $task->clearUsers();
    
    $user = sfGuardUserProfilePeer::retrieveByUuid($this->getRequestParameter('task_user'));
    
    $task->addUser($user->getUserId());
    
    $task->save();
    
    $this->task = $task;
    $this->project = $project;

    $this->setTemplate('show');
    return $this->redirect('project/showTask?tab=tasks&task='.$task->getUuid());
  }

  public function executeDelete()
  {
    $task = TaskPeer::retrieveByUuid($this->getRequestParameter('task'));

    $this->forward404Unless($task);

    $task->delete();

    return $this->redirect($this->getRequest()->getReferer());
  }
}
