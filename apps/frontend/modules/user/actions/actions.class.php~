<?php
// auto-generated by sfPropelCrud
// date: 2008/04/04 15:24:10
?>
<?php

/**
 * user actions.
 *
 * @package    cothink
 * @subpackage user
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class userActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('user', 'list');
  }

  public function executeList()
  {
    $campuses = CampusPeer::buildSelectArray(new Criteria());
    
    //$this->users = sfGuardUserProfilePeer::doSelect(new Criteria());
    $this->users = sfGuardUserProfilePeer::retrievePager(new Criteria());
    $this->campuses = $campuses;
    $this->campuses = CampusPeer::doSelect(new Criteria());
  }

  public function executeAjaxUserPager()
  {
    $name = $this->getRequestParameter('user_name', 'null');
    $campus = $this->getRequestParameter('user_campus', 'null');
    $department = $this->getRequestParameter('user_department', 'null');

    $c = new Criteria();
    
    $this->uri_options = '';

    // Manually edit the criteria, avoids allowing any unexpected criteria to be injected    
    if ($name != "null"  && $name != '')
    {
      $crit1 = $c->getNewCriterion(sfGuardUserProfilePeer::FIRST_NAME, "%".$name."%", Criteria::LIKE);
      $crit2 = $c->getNewCriterion(sfGuardUserProfilePeer::LAST_NAME, "%".$name."%", Criteria::LIKE);
      
      // Building an OR statement with propel...not that much fun
      $crit1->addOr($crit2);
      
      $this->logMessage('name not null, setting: ['.$name.']', 'debug');
      $c->add($crit1);
      $this->uri_options .= '&user_name='.urlencode($name);
    }
    if ($campus != "null" && $campus != '')
    {
      $this->logMessage('status not null, setting: ['.$campus.']');
      $c->add(sfGuardUserProfilePeer::CAMPUS_ID, $campus);
      $this->uri_options .= '&user_campus='.urlencode($campus);
    }
    
    if ($department != "null")
    {
      $this->logMessage('department not null, setting: ['.$department.']');
      $c->add(sfGuardUserProfilePeer::DEPARTMENT_ID, $department);
      $this->uri_options .= '&project_department='.urlencode($department);
    }

    //$this->projects = ProjectPeer::doSelect(new Criteria());
    $this->logMessage('get pager....');
    $this->users = sfGuardUserProfilePeer::retrievePager($c, $this->getRequestParameter('page'), $this->getRequestParameter('max', '10'));
    $this->logMessage('pager retrieved....');
    $this->logMessage('uri: ['.$this->uri_options.']');
    $this->uri_options = str_replace('?&', '?', $this->uri_options);
    $this->logMessage('uri: ['.$this->uri_options.']');
  }

  public function executeShow()
  {
    $this->profile = sfGuardUserProfilePeer::retrieveByUuid($this->getRequestParameter('user'));
    $this->forward404Unless($this->profile);
  }

  public function executeCreate()
  {
    $this->sf_guard_user_profile = new sfGuardUserProfile();

    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
    $this->sf_guard_user_profile = sfGuardUserProfilePeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->sf_guard_user_profile);
  }

  public function executeUpdate()
  {
    if (!$this->getRequestParameter('id'))
    {
      $sf_guard_user_profile = new sfGuardUserProfile();
    }
    else
    {
      $sf_guard_user_profile = sfGuardUserProfilePeer::retrieveByPk($this->getRequestParameter('id'));
      $this->forward404Unless($sf_guard_user_profile);
    }

    $sf_guard_user_profile->setId($this->getRequestParameter('id'));
    $sf_guard_user_profile->setUserId($this->getRequestParameter('user_id') ? $this->getRequestParameter('user_id') : null);
    $sf_guard_user_profile->setUuid($this->getRequestParameter('uuid'));
    $sf_guard_user_profile->setCampusId($this->getRequestParameter('campus_id') ? $this->getRequestParameter('campus_id') : null);
    $sf_guard_user_profile->setDepartmentId($this->getRequestParameter('department_id') ? $this->getRequestParameter('department_id') : null);
    $sf_guard_user_profile->setSubdepartmentId($this->getRequestParameter('subdepartment_id') ? $this->getRequestParameter('subdepartment_id') : null);
    $sf_guard_user_profile->setFirstName($this->getRequestParameter('first_name'));
    $sf_guard_user_profile->setLastName($this->getRequestParameter('last_name'));
    $sf_guard_user_profile->setTitle($this->getRequestParameter('title'));
    $sf_guard_user_profile->setPicture($this->getRequestParameter('picture'));
    $sf_guard_user_profile->setRating($this->getRequestParameter('rating'));
    $sf_guard_user_profile->setRatingCount($this->getRequestParameter('rating_count'));
    $sf_guard_user_profile->setVersion($this->getRequestParameter('version'));
    if ($this->getRequestParameter('deleted_at'))
    {
      list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('deleted_at'), $this->getUser()->getCulture());
      $sf_guard_user_profile->setDeletedAt("$y-$m-$d");
    }

    $sf_guard_user_profile->save();

    return $this->redirect('user/show?id='.$sf_guard_user_profile->getId());
  }

  public function executeDelete()
  {
    $sf_guard_user_profile = sfGuardUserProfilePeer::retrieveByPk($this->getRequestParameter('id'));

    $this->forward404Unless($sf_guard_user_profile);

    $sf_guard_user_profile->delete();

    return $this->redirect('user/list');
  }
  
  public function executeAutocomplete2()
  {
    $this->users = sfGuardUserProfilePeer::getUserNicknamesLike($this->getRequestParameter('recipient'), 5);
  }
  
  public function executeAutoComplete()
  {
    $field = $this->getRequestParameter('field');
    $value = $this->getRequestParameter('user_'.$field);
    //if ($value == null) $value = $this->getRequestParameter('recipient');
    $this->forward404Unless($field, 'Either field or value missing');
    $this->logMessage('value: ['.$value.']');
    
    $c = new Criteria();
    
    switch ($field)
    {
      case 'recipient':
      case 'name':
        $crit1 = $c->getNewCriterion(sfGuardUserProfilePeer::FIRST_NAME, "%".$value."%", Criteria::LIKE);
        $crit2 = $c->getNewCriterion(sfGuardUserProfilePeer::LAST_NAME, "%".$value."%", Criteria::LIKE);
        //$crit3 = $c->getNewCriterion(sfGuardUserProfilePeer::FIRST_NAME, sfGuardUserProfilePeer::FIRST_NAME.'+" "+'.sfGuardUserProfilePeer::LAST_NAME.' = "'.$value.'"', Criteria::CUSTOM);
        
        // Building an OR statement with propel...not that much fun
        $crit1->addOr($crit2);
        //$crit1->addOr($crit3);
        $c->add($crit1);
    }
    
    //$c->addLimit(3);
    $c->setIgnoreCase( true );
    $this->searchTerm = $value;
    $this->results = sfGuardUserProfilePeer::doSelect($c);
  }
  
  public function executeAutoMessageComplete()
  {
    $field = $this->getRequestParameter('field');
    $value = $this->getRequestParameter('user_'.$field);
    //if ($value == null) $value = $this->getRequestParameter('recipient');
    $this->forward404Unless($field, 'Either field or value missing');
    $this->logMessage('value: ['.$value.']');
    
    $c = new Criteria();
    
    switch ($field)
    {
      case 'recipient':
      case 'name':
        $crit1 = $c->getNewCriterion(sfGuardUserProfilePeer::FIRST_NAME, "%".$value."%", Criteria::LIKE);
        $crit2 = $c->getNewCriterion(sfGuardUserProfilePeer::LAST_NAME, "%".$value."%", Criteria::LIKE);
        //$crit3 = $c->getNewCriterion(sfGuardUserProfilePeer::FIRST_NAME, sfGuardUserProfilePeer::FIRST_NAME.'+" "+'.sfGuardUserProfilePeer::LAST_NAME.' = "'.$value.'"', Criteria::CUSTOM);
        
        // Building an OR statement with propel...not that much fun
        $crit1->addOr($crit2);
        //$crit1->addOr($crit3);
        $c->add($crit1);
    }
    
    //$c->addLimit(3);
    $c->setIgnoreCase( true );
    $this->searchTerm = $value;
    $this->results = sfGuardUserProfilePeer::doSelect($c);
  }
  
  public function executeSignUp()
  {
    $this->profile = new sfGuardUserProfile();
    $this->departments = DepartmentPeer::doSelect(new Criteria());
  }
  
  public function executeRegister()
  {
    $campus = CampusPeer::retrieveByEmail($this->getRequestParameter('register_email'));
    $department = DepartmentPeer::retrieveByUuid($this->getRequestParameter('department'));
    //$subdepartment = SubdepartmentPeer::retrieveByName('cognitive neuroscience');

    $this->forward404Unless($campus, 'campus not found');
    $this->forward404Unless($department, 'department not found');
    //$this->forward404Unless($subdepartment, 'subdepartment not found');

    $user = new sfGuardUser();
    
    // TODO: Implement form validation in validate.yml
    $user->setUsername($this->getRequestParameter('register_email'));
    $user->setPassword($this->getRequestParameter('register_password'));
    
    $user->save();
    
    $this->getRequest()->setAttribute('user_id', $user->getId());
    
    $this->logMessage("Sending email confirmation");
    $temp_email = $this->sendEmail('messages', 'confirmRegistrationEmail');
    $this->logMessage("Email confirmation sent");
    
    // Generate a UUID for the user profile, done upon saving it
    $profile = $user->getProfile();
    $profile->setUserId($user->getId());
    $profile->setCampusId($campus->getId());
    $profile->setDepartmentId($department->getId());
    $profile->setFirstName($this->getRequestParameter('first_name'));
    $profile->setLastName($this->getRequestParameter('last_name'));
    $profile->setNoPicture();
    //$profile->setSubdepartmentId($subdepartment->getId());
    $profile->save();
    
    $profile->addHistoryEvent($profile->getFullName().' has joined the Cothink community.', "We would like to welcome you to Cothink, we know you'll work to make the world a better place!");

//    $register_email = $this->sendEmail('messages', 'sendConfirmRegistrationEmail');
    
    return $this->redirect('user/pleaseConfirm?user='.urlencode($user->getUsername()));
  }
  
  public function executePleaseConfirm()
  {
    $this->user = $this->getRequestParameter('user');
  }
  
  public function executeEditProfile()
  {
    // TODO: validate via validate.yml
    // TODO: limit profile editing to user only. Current setup may work.
    $this->forward404Unless($this->getUser()->isAuthenticated(), 'not logged in, cannot edit profile, obviously');
    $this->tab = $this->getRequestParameter('tab', 'summary');
    
    $this->profile = $this->getUser()->getProfile();
    $this->campuses = CampusPeer::doSelect(new Criteria());
    $this->departments = DepartmentPeer::doSelect(new Criteria());
    $this->subdepartments = SubdepartmentPeer::doSelect(new Criteria());
  }
  
  public function executeAjaxEditProfileField()
  {
    $field = $this->getRequestParameter('field');
    $value = $this->getRequestParameter('value');
    
    $this->forward404Unless($field, 'field not found');
    $this->forward404Unless($this->getUser()->isAuthenticated(), 'user not logged in, aborting');

    $profile = $this->getUser()->getProfile();
    
    // Todo: Some sort of validation
    switch ($field)
    {
      case "first_name":
        $profile->setFirstName($value);
        $result = $profile->getFirstName();
        break;
      case "last_name":
        $profile->setLastName($value);
        $result = $profile->getLastName();
        break;
      case "title":
        $profile->setTitle($value);
        $result = $profile->getTitle();
        break;
    }
    
    $profile->save();
    
    $this->output = $result;
  }

  public function executeUpdateProfile()
  {
    $profile = $this->getUser()->getProfile();
    
    //$profile->setCampusId($this->getRequestParameter('campus'));
    //$profile->setDepartmentId($this->getRequestParameter('department'));
    //$profile->setSubdepartmentId($this->getRequestParameter('subdepartment'));
    //$profile->setFirstName($this->getRequestParameter('first_name'));
    //$profile->setLastName($this->getRequestParameter('last_name'));
    //$profile->setTitle($this->getRequestParameter('title'));
    //$profile->setPicture($this->getRequestParameter('picture'));
    $privacy = $this->getRequestParameter('privacy');
    
    $tab = $this->getRequestParameter('tab');
    
    if ($tab == "personal")
    {
      $this->logMessage('tab: ['.$tab.']');
      
      if (is_array($privacy))
      {
        $privacy = $privacy[0];
      }
  
      if (is_numeric($privacy))
      {
        $profile->setPrivacyLevel($privacy);
      }
      $department = DepartmentPeer::retrieveByUuid($this->getRequestParameter('department'));
      $subdepartment = SubdepartmentPeer::retrieveByUuid($this->getRequestParameter('subdepartment'));
      
      $this->forward404Unless($department != null && $subdepartment != null, 'department or subdepartment not found');
      
      $profile->setDepartmentId($department->getId());
      $profile->setSubdepartmentId($subdepartment->getId());
    
      $this->departments = DepartmentPeer::doSelect(new Criteria());
      $this->subdepartments = SubdepartmentPeer::doSelect(new Criteria());
    }
    
    if ($tab == "photo")
    {
      $this->logMessage('Checking to see if we need to remove the photo');
      $currentFile = sfConfig::get('sf_upload_dir')."/photos/".$profile->getPicture();
      $photo_remove = $this->getRequestParameter('photo_remove', null);
      if (!$this->getRequest()->hasErrors() && !is_null($photo_remove))
      {
        $this->logMessage('We need to remove it!');
        $profile->setNoPicture();
        if (is_file($currentFile))
        {
          unlink($currentFile);
        }
      }
    
      $this->logMessage('Attempting to set photo');
      if (!$this->getRequest()->hasErrors() && $this->getRequest()->getFileSize('photo'))
      {
        $fileName = md5($this->getRequest()->getFileName('photo').time().rand(0, 99999));
        $ext = $this->getRequest()->getFileExtension('photo');
        if (is_file($currentFile))
        {
          unlink($currentFile);
        }
        $this->getRequest()->moveFile('photo', sfConfig::get('sf_upload_dir')."/photos/".$fileName.$ext);
        $profile->setPicture($fileName.$ext);
        $this->logMessage('Photo set to ['.$fileName.'.'.$ext.']');
      }
      
      $this->logMessage('Was the photo set?');
    }
  
    $profile->save();

    //$this->campuses = CampusPeer::doSelect(new Criteria());
    $this->profile = $profile;
    $this->tab = $tab;

    return $this->redirect('user/editProfile?user='.$profile->getUuid().'&tab='.$tab);
  }
  
  public function handleErrorRegister()
  {
    $this->profile = new sfGuardUserProfile();
    $this->departments = DepartmentPeer::doSelect(new Criteria());
    $this->setTemplate("signUp");
    return sfView::SUCCESS;
  }
  
  public function handleErrorUpdateProfile()
  {
    $this->forward404Unless($this->getUser()->isAuthenticated(), 'not logged in, cannot edit profile, obviously');
    
    $this->profile = $this->getUser()->getProfile();
    $this->campuses = CampusPeer::doSelect(new Criteria());
    $this->departments = DepartmentPeer::doSelect(new Criteria());
    $this->subdepartments = SubdepartmentPeer::doSelect(new Criteria());

    $this->setTemplate("editProfile");
    return sfView::SUCCESS;
  }

  public function executeBlogEntry()
  {
	$this->profile = $this->getUser()->getProfile();
  }
}
