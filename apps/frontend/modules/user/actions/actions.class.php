<?php
// auto-generated by sfPropelCrud
// date: 2008/04/04 15:24:10
?>
<?php

/**
 * user actions.
 *
 * @package    cothink
 * @subpackage user
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class userActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('user', 'list');
  }

  public function executeList()
  {
    $this->tab = sfConfig::get('app_tab_user_browse');
    $campuses = CampusPeer::buildSelectArray(new Criteria());
    
    //$this->users = sfGuardUserProfilePeer::doSelect(new Criteria());
    $this->users = sfGuardUserProfilePeer::retrievePager(new Criteria(), 1, sfConfig::get('app_pager_user_max'));

    $this->campuses = $campuses;
    $this->campuses = CampusPeer::doSelect(new Criteria());
    
    myToolkit::prependPageTitle('CoThink Members');
    
  }

  public function executeAjaxUserPager()
  {
    $name = $this->getRequestParameter('user_name', 'null');
    $campus = $this->getRequestParameter('user_campus', 'null');
    $department = $this->getRequestParameter('user_department', 'null');

    $c = new Criteria();
    
    $this->uri_options = '';

    // Manually edit the criteria, avoids allowing any unexpected criteria to be injected
    if ($name != "null"  && $name != '')
    {
      $value = $name;
      $crit1 = $c->getNewCriterion(sfGuardUserProfilePeer::FIRST_NAME, "%".$value."%", Criteria::LIKE);
      $crit2 = $c->getNewCriterion(sfGuardUserProfilePeer::LAST_NAME, "%".$value."%", Criteria::LIKE);
      $crit3 = $c->getNewCriterion(sfGuardUserProfilePeer::FIRST_NAME, 'UPPER(CONCAT('.sfGuardUserProfilePeer::FIRST_NAME.', " ", '.sfGuardUserProfilePeer::LAST_NAME.')) LIKE UPPER(\'%'.$value.'%\')', Criteria::CUSTOM);
      
      // Building an OR statement with propel...not that much fun
      $crit1->addOr($crit2);
      $crit1->addOr($crit3);
      $c->add($crit1);
      
      $this->logMessage('name not null, setting: ['.$name.']', 'debug');
      $c->add($crit1);
      $this->uri_options .= '&user_name='.urlencode($name);
    }
    if ($campus != "null" && $campus != '')
    {
      $this->logMessage('status not null, setting: ['.$campus.']');
      $c->add(sfGuardUserProfilePeer::CAMPUS_ID, $campus);
      $this->uri_options .= '&user_campus='.urlencode($campus);
    }
    
    if ($department != "null")
    {
      $this->logMessage('department not null, setting: ['.$department.']');
      $c->add(sfGuardUserProfilePeer::DEPARTMENT_ID, $department);
      $this->uri_options .= '&project_department='.urlencode($department);
    }

    //$this->projects = ProjectPeer::doSelect(new Criteria());
    //$this->logMessage('get pager....');
    $this->users = sfGuardUserProfilePeer::retrievePager($c, $this->getRequestParameter('page'), $this->getRequestParameter('max', sfConfig::get('app_pager_user_max')));
    //$this->logMessage('pager retrieved....');
    //$this->logMessage('uri: ['.$this->uri_options.']');
    $this->uri_options = str_replace('?&', '?', $this->uri_options);
    //$this->logMessage('uri: ['.$this->uri_options.']');
  }

  /**
   * Executes ShowProfile action
   *
   */
  public function executeShowProfile()
  {
    $this->forward404Unless($this->profile = sfGuardUserProfilePeer::retrieveByUuid($this->getRequestParameter('user')));
    
    $this->tab = "profile";
    
    myToolkit::prependPageTitle($this->profile->getFullName()."'s Profile");
  }

  /**
   * Executes ShowProjects action
   *
   */
  public function executeShowProjects()
  {
    $this->forward404Unless($this->profile = sfGuardUserProfilePeer::retrieveByUuid($this->getRequestParameter('user')));
    
    $this->tab = "personalprojects";
    
    myToolkit::prependPageTitle($this->profile->getFullName()."'s Projects");
  }

  /**
   * Executes ShowPersonal action
   *
   */
  public function executeShowPersonal()
  {
    $this->forward404Unless($this->getUser()->isAuthenticated() && $this->profile = $this->getUser()->getProfile());
    
    $this->tab = "personal";
    
    myToolkit::prependPageTitle("Your personal CoThink Page");
  }

  public function executeCreate()
  {
    $this->sf_guard_user_profile = new sfGuardUserProfile();

    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
    //$this->forward404Unless($this->getUser()->isAuthenticated() && $this->profile = $this->getUser()->getProfile());
  }

  public function executeUpdate()
  {
    if (!$this->getRequestParameter('id'))
    {
      $sf_guard_user_profile = new sfGuardUserProfile();
    }
    else
    {
      $sf_guard_user_profile = sfGuardUserProfilePeer::retrieveByPk($this->getRequestParameter('id'));
      $this->forward404Unless($sf_guard_user_profile);
    }

    $sf_guard_user_profile->setId($this->getRequestParameter('id'));
    $sf_guard_user_profile->setUserId($this->getRequestParameter('user_id') ? $this->getRequestParameter('user_id') : null);
    $sf_guard_user_profile->setUuid($this->getRequestParameter('uuid'));
    $sf_guard_user_profile->setCampusId($this->getRequestParameter('campus_id') ? $this->getRequestParameter('campus_id') : null);
    $sf_guard_user_profile->setDepartmentId($this->getRequestParameter('department_id') ? $this->getRequestParameter('department_id') : null);
    $sf_guard_user_profile->setSubdepartmentId($this->getRequestParameter('subdepartment_id') ? $this->getRequestParameter('subdepartment_id') : null);
    $sf_guard_user_profile->setFirstName($this->getRequestParameter('first_name'));
    $sf_guard_user_profile->setLastName($this->getRequestParameter('last_name'));
    $sf_guard_user_profile->setTitle($this->getRequestParameter('title'));
    $sf_guard_user_profile->setPicture($this->getRequestParameter('picture'));
    $sf_guard_user_profile->setRating($this->getRequestParameter('rating'));
    $sf_guard_user_profile->setRatingCount($this->getRequestParameter('rating_count'));
    $sf_guard_user_profile->setVersion($this->getRequestParameter('version'));
    if ($this->getRequestParameter('deleted_at'))
    {
      list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('deleted_at'), $this->getUser()->getCulture());
      $sf_guard_user_profile->setDeletedAt("$y-$m-$d");
    }

    $sf_guard_user_profile->save();

    return $this->redirect('@show_user?user='.$sf_guard_user_profile->getUserId());
  }

  public function executeDelete()
  {
    $sf_guard_user_profile = sfGuardUserProfilePeer::retrieveByPk($this->getRequestParameter('id'));

    $this->forward404Unless($sf_guard_user_profile);

    $sf_guard_user_profile->delete();

    return $this->redirect('@list_members');
  }
  
  public function executeAutocomplete2()
  {
    $this->users = sfGuardUserProfilePeer::getUserNicknamesLike($this->getRequestParameter('recipient'), 5);
  }
  
  public function executeAutoComplete()
  {
    $field = $this->getRequestParameter('field');
    $value = $this->getRequestParameter('user_'.$field);
    //if ($value == null) $value = $this->getRequestParameter('recipient');
    $this->forward404Unless($field, 'Either field or value missing');
    $this->logMessage('value: ['.$value.']');
    
    $c = new Criteria();
    
    switch ($field)
    {
      case 'recipient':
      case 'name':
        $crit1 = $c->getNewCriterion(sfGuardUserProfilePeer::FIRST_NAME, "%".$value."%", Criteria::LIKE);
        $crit2 = $c->getNewCriterion(sfGuardUserProfilePeer::LAST_NAME, "%".$value."%", Criteria::LIKE);
        $crit3 = $c->getNewCriterion(sfGuardUserProfilePeer::FIRST_NAME, 'UPPER(CONCAT('.sfGuardUserProfilePeer::FIRST_NAME.', " ", '.sfGuardUserProfilePeer::LAST_NAME.'))=UPPER("'.$value.'")', Criteria::CUSTOM);
        
        // Building an OR statement with propel...not that much fun
        $crit1->addOr($crit2);
        $crit1->addOr($crit3);
        $c->add($crit1);
      }
    
    //$c->addLimit(3);
    $c->setIgnoreCase( true );
    $this->searchTerm = $value;
    $this->results = sfGuardUserProfilePeer::doSelect($c);
  }
  
  public function executeAutoSubdepartmentComplete()
  {
    $value = trim($this->getRequestParameter('subdepartment'));
    
    $c = new Criteria();
    
    $c->add(SubdepartmentPeer::NAME, '%'.$value.'%', Criteria::LIKE);
    $c->setIgnoreCase( true );
    
    $this->results = SubdepartmentPeer::doSelect($c);
    $this->searchTerm = trim($this->getRequestParameter('subdepartment'));
  }
  
  public function executeAutoMessageComplete()
  {
    $field = $this->getRequestParameter('field');
    $value = $this->getRequestParameter('user_'.$field);
    //if ($value == null) $value = $this->getRequestParameter('recipient');
    $this->forward404Unless($field, 'Either field or value missing');
    $this->logMessage('value: ['.$value.']');
    
    $c = new Criteria();
    
    switch ($field)
    {
      case 'recipient':
      case 'name':
        $crit1 = $c->getNewCriterion(sfGuardUserProfilePeer::FIRST_NAME, "%".$value."%", Criteria::LIKE);
        $crit2 = $c->getNewCriterion(sfGuardUserProfilePeer::LAST_NAME, "%".$value."%", Criteria::LIKE);
        $crit3 = $c->getNewCriterion(sfGuardUserProfilePeer::FIRST_NAME, 'UPPER(CONCAT('.sfGuardUserProfilePeer::FIRST_NAME.', " ", '.sfGuardUserProfilePeer::LAST_NAME.')) LIKE UPPER(\'%'.$value.'%\')', Criteria::CUSTOM);
        
        // Building an OR statement with propel...not that much fun
        $crit1->addOr($crit2);
        $crit1->addOr($crit3);
        $c->add($crit1);
    }
    
    //$c->addLimit(3);
    $c->setIgnoreCase( true );
    $this->searchTerm = $value;
    $this->results = sfGuardUserProfilePeer::doSelect($c);
  }
  
  public function executeSignUp()
  {
    $this->profile = new sfGuardUserProfile();
    $this->departments = DepartmentPeer::doSelect(new Criteria());
  }
  
  public function executeRegister()
  {
    $campus = CampusPeer::retrieveByEmail($this->getRequestParameter('register_email'));
    $department = DepartmentPeer::retrieveByUuid($this->getRequestParameter('department'));
    //$subdepartment = SubdepartmentPeer::retrieveByName('cognitive neuroscience');

    if ($campus == null) {
       $campus = CampusPeer::retrieveByEmail("@public");
       $this->logMessage("Campus was null, now set to ($campus)");
       }

    $this->forward404Unless($campus, 'campus not found');
    $this->forward404Unless($department, 'department not found');
    //$this->forward404Unless($subdepartment, 'subdepartment not found');

    $user = new sfGuardUser();
    
    // TODO: Implement form validation in validate.yml
    $user->setUsername($this->getRequestParameter('register_email'));
    $user->setPassword($this->getRequestParameter('register_password'));
    
    $user->save();
    
    $this->user = $user->toArray();
    
    $this->logMessage('USER_ARRAY: '.print_r($this->user, true));
    
    $this->username = $this->user['Username'];
    $this->logMessage('USER_NAME_VAR: '.$this->username);
    
    sfPropelApprovableBehavior::disable();
    $this->getRequest()->setAttribute('user_id', $user->getId());
    $this->logMessage('Set user_id in attributes: ['.$user->getId().']:['.$this->getRequest()->getAttribute('user_id').']');
    
    
    //$temp_email = $this->sendEmail('messages', 'confirmRegistrationEmail');
    
    
    // Generate a UUID for the user profile, done upon saving it
    $profile = $user->getProfile();
    $profile->setUserId($user->getId());
    $profile->setCampusId($campus->getId());
    $profile->setDepartmentId($department->getId());
    $profile->setFirstName($this->getRequestParameter('first_name'));
    $profile->setLastName($this->getRequestParameter('last_name'));
    $profile->setNoPicture();
    $profile->setTitle('student');
    $profile->setGender(sfConfig::get('app_profile_unknown'));
    //$profile->setSubdepartmentId($subdepartment->getId());
    $profile->save();
    
    $profile->getPrimaryContactInfo();
    
    
    $profile->addHistoryEvent($profile->getFullName().' has joined the Cothink community.', "We would like to welcome you to Cothink, we know you'll work to make the world a better place!");
    
    $profile->addKarma(sfConfig::get('app_karma_join_site_points'));

//    $register_email = $this->sendEmail('messages', 'sendConfirmRegistrationEmail');

    sfPropelApprovableBehavior::disable();
    $this->user = sfGuardUserPeer::retrieveByUsername('sgrove@berkeley.edu');
    /*
    $this->logMessage("Sending email confirmation");
    $conn = new Swift_Connection_SMTP( sfConfig::get('mod_sfswiftmailer_smtp_host', 'localhost') );

    // Need auth for SMTP
    $conn->setUsername( sfConfig::get('mod_sfswiftmailer_smtp_user') );
    $conn->setPassword( sfConfig::get('mod_sfswiftmailer_smtp_pass') );
    
    $mailer = new Swift($conn);

    // Get our message bodies
    $htmlBody = $this->getPresentationFor('messages', 'confirmRegistrationHtml');
    $textBody = $this->getPresentationFor('messages', 'confirmRegistrationText');

      //Create a message
      $message = new Swift_Message("Thank you for joining the Cothink community. Please confirm your email address to complete registration.");
  
      //Add some "parts"
      $message->attach(new Swift_Message_Part($textBody));
      $message->attach(new Swift_Message_Part($htmlBody, "text/html"));

    // Send out our mailer
    $mailer->send($message, $this->username, 'admin@cothink.dyndns.org');
    $mailer->disconnect();
    $this->logMessage("Email confirmation sent");
    //return sfView:: SUCCESS;
    */
    //return $this->redirect('user/pleaseConfirm?user='.urlencode($this->user['Username']));

    return $this->redirect("@show_user_profile?user=".$profile->getUuid());
  }
  
  public function executePleaseConfirm()
  {
    $this->user = $this->getRequestParameter('user');
  }
  
  public function executeEditProfile()
  {
    // TODO: validate via validate.yml
    // TODO: limit profile editing to user only. Current setup may work.
    $this->forward404Unless($this->getUser()->isAuthenticated(), 'not logged in, cannot edit profile, obviously');
    $this->tab = "editprofile";
    
    $this->profile = $this->getUser()->getProfile();
    $this->campuses = CampusPeer::doSelect(new Criteria());
    $this->departments = DepartmentPeer::doSelect(new Criteria());
    $this->subdepartments = SubdepartmentPeer::doSelect(new Criteria());
    
    myToolkit::prependPageTitle('Editing your profile');
  }
  
  public function executeAjaxEditProfileField()
  {
    $field = $this->getRequestParameter('field');
    $value = $this->getRequestParameter('value');
    
    $this->forward404Unless($field, 'field not found');
    $this->forward404Unless($this->getUser()->isAuthenticated(), 'user not logged in, aborting');

    $profile = $this->getUser()->getProfile();
    
    // Todo: Some sort of validation
    switch ($field)
    {
      case "first_name":
        $profile->setFirstName($value);
        $result = $profile->getFirstName();
        break;
      case "last_name":
        $profile->setLastName($value);
        $result = $profile->getLastName();
        break;
      case "title":
        $profile->setTitle($value);
        $result = $profile->getTitle();
        break;
    }
    
    $profile->save();
    
    $this->output = $result;
  }

  public function executeUpdateProfile()
  {
    $profile = $this->getUser()->getProfile();
    
    //$profile->setCampusId($this->getRequestParameter('campus'));
    //$profile->setDepartmentId($this->getRequestParameter('department'));
    //$profile->setSubdepartmentId($this->getRequestParameter('subdepartment'));
    //$profile->setFirstName($this->getRequestParameter('first_name'));
    //$profile->setLastName($this->getRequestParameter('last_name'));
    //$profile->setTitle($this->getRequestParameter('title'));
    //$profile->setPicture($this->getRequestParameter('picture'));
    //$privacy = $this->getRequestParameter('privacy');
    
    /*
    $tab = $this->getRequestParameter('tab');
    
    if ($tab == "personal")
    {
      $this->logMessage('tab: ['.$tab.']');
      
      if (is_array($privacy))
      {
        $privacy = $privacy[0];
      }
  
      if (is_numeric($privacy))
      {
        $profile->setPrivacyLevel($privacy);
      }
      $department = DepartmentPeer::retrieveByUuid($this->getRequestParameter('department'));
      $subdepartment = SubdepartmentPeer::retrieveByUuid($this->getRequestParameter('subdepartment'));
      
      $this->forward404Unless($department != null && $subdepartment != null, 'department or subdepartment not found');
      
      $profile->setDepartmentId($department->getId());
      $profile->setSubdepartmentId($subdepartment->getId());
    
      $this->departments = DepartmentPeer::doSelect(new Criteria());
      $this->subdepartments = SubdepartmentPeer::doSelect(new Criteria());

      $this->getUser()->setCulture($this->getRequestParameter('language', 'en_US');


    }
    
    if ($tab == "photo")
    {
      $this->logMessage('Checking to see if we need to remove the photo');
      $currentFile = sfConfig::get('sf_upload_dir')."/photos/".$profile->getPicture();
      $photo_remove = $this->getRequestParameter('photo_remove', null);
      if (!$this->getRequest()->hasErrors() && !is_null($photo_remove))
      {
        $this->logMessage('We need to remove it!');
        $profile->setNoPicture();
        if (is_file($currentFile))
        {
          unlink($currentFile);
        }
      }
    
      $this->logMessage('Attempting to set photo');
      if (!$this->getRequest()->hasErrors() && $this->getRequest()->getFileSize('photo'))
      {
        $fileName = md5($this->getRequest()->getFileName('photo').time().rand(0, 99999));
        $ext = $this->getRequest()->getFileExtension('photo');
        if (is_file($currentFile))
        {
          unlink($currentFile);
        }
        $this->getRequest()->moveFile('photo', sfConfig::get('sf_upload_dir')."/photos/".$fileName.$ext);
        $profile->setPicture($fileName.$ext);
        $this->logMessage('Photo set to ['.$fileName.'.'.$ext.']');
      }
      
      $this->logMessage('Was the photo set?');
    }
    */
    
    $department = DepartmentPeer::retrieveByUuid($this->getRequestParameter('departments'));
    $this->forward404Unless($department, 'Dept not found, unable to set.');
    
    $subdepartment = SubdepartmentPeer::retrieveByName(trim($this->getRequestParameter('subdepartment')));
    if ($subdepartment == null)
    {
      $subdept = new Subdepartment();
      $subdept->setDepartmentId($department->getId());
      $subdept->setName($this->getRequestParameter('subdepartment'));
      $subdept->setAbbreviation($this->getRequestParameter('subdepartment'));
      
      $subdept->save();
      $subdepartment = $subdept;
    }
    
    $profile->setDepartmentId($department->getId());
    $profile->setSubdepartmentId($subdepartment->getId());
    
    if ($this->getRequestParameter('about') != null) { $profile->setAbout($this->getRequestParameter('about')); }
    if ($this->getRequestParameter('gender') == sfConfig::get('app_profile_gender_male') || $this->getRequestParameter('gender') == sfConfig::get('app_profile_gender_female')) $profile->setGender($this->getRequestParameter('gender'));

    if ($this->getRequestParameter('language') != null) {
       $this->getUser()->setCulture($this->getRequestParameter('language'));
      }

    $this->logMessage("User culture set to $this->getUser()->getCulture()");
       
    $profile->save();
    
    $contactInfo = $this->getUser()->getProfile()->getPrimaryContactInfo();
    
    $contactInfo->setPhone($this->getRequestParameter('phone'));
    $contactInfo->setEmail($this->getRequestParameter('email'));
    
    $contactInfo->save();
    
    if ($this->getRequestParameter('profile_password') != null && 
        $this->getRequestParameter('profile_password') == $this->getRequestParameter('profile_password_confirm'))
    {
      $user = $profile->getsfGuardUser();
      $user->setPassword($this->getRequestParameter('profile_password'));
      $user->save();
    }

    //$this->campuses = CampusPeer::doSelect(new Criteria());
    $this->profile = $profile;

    return $this->redirect('@edit_user_profile');
  }
  
  public function handleErrorRegister()
  {
    $this->profile = new sfGuardUserProfile();
    $this->departments = DepartmentPeer::doSelect(new Criteria());
    $this->setTemplate("signUp");
    return sfView::SUCCESS;
  }
  
  public function handleErrorUpdateProfile()
  {
    $this->forward404Unless($this->getUser()->isAuthenticated(), 'not logged in, cannot edit profile, obviously');
    $this->tab = "editprofile";
    
    $this->profile = $this->getUser()->getProfile();
    $this->campuses = CampusPeer::doSelect(new Criteria());
    $this->departments = DepartmentPeer::doSelect(new Criteria());
    $this->subdepartments = SubdepartmentPeer::doSelect(new Criteria());

    $this->setTemplate("editProfile");
    return sfView::SUCCESS;
  }

  public function executeBlogEntry()
  {
	  $this->profile = $this->getUser()->getProfile();
  }
  
  public function executeSetProfilePhoto()
  {
    $photo = sfPhotoGalleryPeer::retrieveByUuid($this->getRequestParameter('photo'));
    $this->forward404Unless($photo, 'Photo not found, unable to set profile photo');
    
    $profile = $this->getUser()->getProfile();
    
    $profile->setPicture($photo->getUuid());
    $profile->save();
    
    $this->redirect($this->getRequest()->getReferer());
  }
  
  public function executeRemovePhoto()
  {
    $photo = sfPhotoGalleryPeer::retrieveByUuid($this->getRequestParameter('photo'));
    $this->forward404Unless($photo, 'Photo not found, unable to set profile photo');
    
    // Make sure photo belongs to user
    if (sfPhotoGalleryPeer::isAttachedToEntity('User', $this->getUser()->getProfile()->getId(), $photo->getUuid()))
    {
      // Make sure we update the picture if profile photo
      if ($photo->getUuid() != $this->getUser()->getProfile()->getPicture())
      {
        $photo->delete();
      }
      else
      {
        $photo->delete();
        $this->getUser()->getProfile()->setPicture( NULL );
        $this->getUser()->getProfile()->save();
      }
    }
    
    
    $this->redirect($this->getRequest()->getReferer());
  }
  
  public function executeUpdateContactInfo()
  {
    $contactInfo = $this->getUser()->getProfile()->getPrimaryContactInfo();
    
    $contactInfo->setPhone($this->getRequestParameter('phone'));
    $contactInfo->setEmail($this->getRequestParameter('email'));
    
    $contactInfo->save();
    
    $this->redirect($this->getRequest()->getReferer());
  }
  
  public function executeSubscribeToFeed()
  {
    $group = HistoryGroupPeer::retrieveByUuid($this->getRequestParameter('feed'));
    
    if ($group != null)
    {
      $this->getUser()->getProfile()->subscribeToHistory($group->getName());
    }
    
    $this->redirect($this->getRequest()->getReferer());
  }
  
  public function executeUnsubscribeToFeed()
  {
    $group = HistoryGroupPeer::retrieveByUuid($this->getRequestParameter('feed'));
    
    if ($group != null)
    {
      $this->getUser()->getProfile()->unsubscribeToHistory($group->getName());
    }
    
    $this->redirect($this->getRequest()->getReferer());
  }
  
  public function executeForgotPassword()
  {
    if ($this->getRequest()->getMethod() == sfRequest::POST) {
      $prefix = "habbadabbado";
      $suffix = 'fao34r89aq3nr98awr9a8w3fu8w593yn5wal3u73nl4q32n89vun32592o;35w;35q3utrqw3;nr';
      $username = $this->getRequestParameter('username');
    
      $token = md5($prefix . $username . uniqid(null, true) . $suffix);
    
      sfPropelApprovableBehavior::disable();
    
      $user = sfGuardUserProfilePeer::retrieveByUsername($username);
      $user->setToken($token);
      
      sfPropelApprovableBehavior::disable();
      $user->save();
      
      sfPropelApprovableBehavior::disable();
      $this->getUser()->setAttribute('user_id',$user->getUuid());
    
      $this->message = "Instructions on resetting your password have been sent to ".$username;
/*
       $conn   = new Swift_Connection_SMTP( sfConfig::get('app_sfswiftmailer_smtp_host') );

       // Need auth for SMTP
       $conn->setUsername( sfConfig::get('app_sfswiftmailer_smtp_user') );
       $conn->setPassword( sfConfig::get('app_sfswiftmailer_smtp_pass') );

       $mailer = new Swift($conn);

       // Get our message bodies
       $htmlBody = $this->getPresentationFor('messages', 'forgotPasswordHtml');
       $textBody = $this->getPresentationFor('messages', 'forgotPasswordText');

       //Create a message
       $message = new Swift_Message("It seems you may have forgotten your password for cothink.org. Here are some instructions for resetting it.");

       //Add some "parts"
       $message->attach(new Swift_Message_Part($textBody));
       $message->attach(new Swift_Message_Part($htmlBody, "text/html"));

     // Send out our mailer
     $mailer->send($message, $this->user->getUsername(), 'admin@cothink.dyndns.org');
     $mailer->disconnect();
    */
     
     $this->username = $username;
     
     $this->setTemplate('passwordSent');

     return sfView:: SUCCESS;
   }
  }
  
 /**
  * Handles Error forgotPassword
  *
  */
 public function handleErrorForgotPassword()
 {
   $this->setTemplate('forgotPassword');
   
   return sfView::SUCCESS;
 }
 
 public function executeResetPassword()
 {
   sfPropelApprovableBehavior::disable();
   $this->forward404Unless($profile = sfGuardUserProfilePeer::retrieveByUuid($this->getRequestParameter('user')), 'Unable to set profile, cannot continue to reset password');

   sfPropelApprovableBehavior::disable();
   $this->forward404Unless($user = $profile->getsfGuardUser(), 'User not found, unable to reset password');
   
   $this->token = $this->getRequestParameter('token');
   
   $this->forward404Unless($this->token == $profile->getToken(), 'Tokens do not match, unable to reset password: ['.$this->token.']:['.$profile->getToken().'] for '.$profile->getFullName());
   if ($this->getRequest()->getMethod() == sfRequest::POST)
   {    
    sfPropelApprovableBehavior::disable();
    if ($profile->getToken() == $this->getRequestParameter('token'))
    {
      $user->setPassword($this->getRequestParameter('password'));
      $user->save();
      
      sfPropelApprovableBehavior::disable();
      $profile->setToken(null);
      $profile->save();
      
      $this->setTemplate('newPasswordSet');
      return sfView::SUCCESS;
    }
   }
   
   $this->user = $user;
   $this->profile = $profile;
 }
 
 public function handleErrorResetPassword()
 {
   sfPropelApprovableBehavior::disable();
   $this->forward404Unless($profile = sfGuardUserProfilePeer::retrieveByUuid($this->getRequestParameter('user')), 'Unable to set profile, cannot continue to reset password');

   sfPropelApprovableBehavior::disable();
   $this->forward404Unless($user = $profile->getsfGuardUser(), 'User not found, unable to reset password');
   
   $this->token = $this->getRequestParameter('token');
   
   $this->forward404Unless($this->token == $profile->getToken(), 'Tokens do not match, unable to reset password: ['.$this->token.']:['.$profile->getToken().'] for '.$profile->getFullName());
   
   $this->user = $user;
   $this->profile = $profile;
   
   return sfView::SUCCESS;
 }
 
 /**
  * Executes showTodo action
  *
  */
 public function executeShowTodo()
 {
   $this->forward404Unless($this->profile = sfGuardUserProfilePeer::retrieveByUuid($this->getRequestParameter('user')), 'User not found');
   $this->forward404Unless($this->todo = ToDoPeer::retrieveByUserIdSlug($this->profile->getUserId(), $this->getRequestParameter('todo')), 'Todo not found by user_id:slug, ['.$this->profile->getUserId().']:['.$this->getRequestParameter('todo').']');
   $this->forward404Unless($this->todo->getOwnerId() == $this->getUser()->getId(), 'Owner doesn\'t match current user');
 }
 
 /**
  * Executes addTodo action
  *
  */
 public function executeAjaxAddTodo()
 {
   $this->forward404Unless($this->getUser()->isAuthenticated());
   $todo = new ToDo();
   $todo->setName($this->getRequestParameter('name'));
   $todo->setDescription($this->getRequestParameter('description'));
   $todo->setOwnerId($this->getUser()->getId());
   $todo->setStatus(sfConfig::get('app_task_status_open'));
   
   if ($this->getRequestParameter('begin'))
   {
     list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('begin'), $this->getUser()->getCulture());
     $todo->setBegin("$y-$m-$d");
   }
   if ($this->getRequestParameter('finish'))
   {
     list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('finish'), $this->getUser()->getCulture());
     $todo->setFinish("$y-$m-$d");
   }
   
   $todo->save();
   
   $this->getUser()->getProfile()->addKarma(sfConfig::get('app_karma_complete_todo_points'));
 }

 /**
  * Executes updateTodo action
  *
  */
 public function executeUpdateTodo()
 {
   $this->forward404Unless($this->getUser()->isAuthenticated() && $this->profile = $this->getUser()->getProfile());
   $this->forward404Unless($todo = ToDoPeer::retrieveByUserIdSlug($this->profile->getUserId(), $this->getRequestParameter('todo'), true), 'Todo not found by user_id:slug, ['.$this->profile->getUserId().']:['.$this->getRequestParameter('todo').']');
   $this->forward404Unless($todo->getOwnerId() == $this->getUser()->getId(), 'Owner doesn\'t match current user');

   $todo->setName($this->getRequestParameter('name'));
   $todo->setDescription($this->getRequestParameter('description'));
   $todo->setStatus($this->getRequestParameter('status'));
   
   if ($this->getRequestParameter('begin'))
   {
     list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('begin'), $this->getUser()->getCulture());
     $todo->setBegin("$y-$m-$d");
   }
   if ($this->getRequestParameter('finish'))
   {
     list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('finish'), $this->getUser()->getCulture());
     $todo->setFinish("$y-$m-$d");
   }
   
   $todo->save();
   
   $this->todo = $todo;
   $this->setTemplate('showTodo');
 }

 public function handleErrorAjaxAddTodo()
 {
   $this->setTemplate('ajaxAddTodo');
   $this->displayForm = true;
   return sfView::SUCCESS;
 }
 
 public function executeUpdateExternalServices()
 {
   $this->profile = $this->getUser()->getProfile();
   
   $this->logMessage('Profile set: ['.$this->profile.']');
   $twitter_username = $this->getRequestParameter('twitter_username');
   $twitter_password = $this->getRequestParameter('twitter_password');
   
   if ($twitter_username != null && $twitter_password != null)
   {
     $ext_services = $this->getUser()->getProfile()->getExternalServices();
     
     $ext_services->setTwitterUsername($twitter_username);
     if ($twitter_password != sfConfig::get('app_profile_null_password')) {
       $ext_services->setTwitterPassword($twitter_password);
     }
     $ext_services->setTwitterConfirmed( true );
     $ext_services->setTwitterUpdate( $this->getRequestParameter('twitter_update'));
     $ext_services->setTwitterStatusUpdate( $this->getRequestParameter('twitter_status_update'));
     
     $ext_services->save();
     
     $es = $ext_services;
     
     $twitter = new TwitterService($es->getTwitterUsername(), $es->getTwitterPassword());

     $response = $twitter->follow('cothink');
     $response = $twitter->createFriendship('cothink');
     
     $twitter2 = new TwitterService(sfConfig::get('app_external_twitter_username'), sfConfig::get('app_external_twitter_password'));
     $response = $twitter2->follow($es->getTwitterUsername());
     $response = $twitter2->createFriendship($es->getTwitterUsername());
     
     $message = ' Hey, we\'re following each other now - how exciting!';
     
     if ($es->getTwitterUpdate()) {
      $message .= ' We\'ll include twitter updates for you from now on.';
     }
     else
     {
       $message .= 'We\'ll only send you critical updates, unless you choose to use our TwitterUpdate.';
     }
     
     if ($es->getTwitterStatusUpdate()) {
      $message .= 'Also, your CoThink status will be set to your latest tweet.';
     }
     
     $response = $this->getUser()->getProfile()->notify($message);

   }
   
   //$this->redirect('user/editProfile');
 }
 
 public function handleErrorUpdateExternalServices()
 {
   $this->profile = $this->getUser()->getProfile();
   
   $this->setTemplate('updateExternalServices');
   return sfView::SUCCESS;
 }
}
