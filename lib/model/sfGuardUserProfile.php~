<?php

/**
 * Subclass for representing a row from the 'ct_user' table.
 *
 * 
 *
 * @package lib.model
 */ 
class sfGuardUserProfile extends BasesfGuardUserProfile
{
  public function __toString()
  {
    return substr($this->getFirstName(),0,1).' '.$this->getLastName();
  }
  
  public function getFullName()
  {
    return $this->getFirstName().' '.$this->getLastName();
  }
  
  public function getLastNameFirstName()
  {
    return $this->getLastName().' '.$this->getFirstName();
  }
  
  public function getPhoto()
  {
    return '/'.sfConfig::get('sf_upload_dir_name').'/photos/'.$this->getPicture();
  }
  
  public function getThumbnail()
  {
    return '/'.sfConfig::get('sf_upload_dir_name').'/thumbnails/'.$this->getPicture();
  }
  
  public function getContacts()
  {
    return ContactInfoPeer::getUserContactInfo($this->getUserId());
  }

  public function getProjects()
  {
	  sfContext::getInstance()->getLogger()->info('Filtering user positions for projects...');
	  $positions = $this->getPositionsUser();

	  $projects = array();

	  foreach ($positions as $position)
	  {
		  $projects[] = $position->geProjecttPosition()->getProject();
	  }

	  return $projects;
  }

  public function getPositions()
  {
	  sfContext::getInstance()->getLogger()->info('Filtering user positions for projects...');
	  $positionsUser = $this->getPositionsUser();

	  $positions = array();

	  foreach ($positionsUser as $positionUser)
	  {
		  $positions[] = $positionUser->getPosition();
	  }

	  return $positions;
  }
  
  public function getPositionsUser()
  {
	sfContext::getInstance()->getLogger()->info('Grabbing user positions...');
	return ProjectUserPeer::retrieveFilledByUserId($this->getUserId());
  }

  public function setNoPicture()
  {
    $this->setPicture('nopicture.jpg');
  }

  // == Extend the model for business logic

  public function save($con = null)
  {
      // == pre save hook
      // fill prereq fields

      // == call the parent save() method
      parent::save($con);

      // == post save hook
      // fill extra fields
      $fileName = $this->getPicture();
      imgHandling::genThumbnail(100, 100,
                                sfConfig::get('sf_upload_dir').'/photos/',
                                $fileName);
  }

  public function isUser($user_id)
  {
	  if ($this->getUserId() == $user_id)
	  {
		  return true;
	  }
	  elseif ($this->getUuid() == $user_id)
	  {
		  return true;
	  }

	  return false;
  }
  public function subscribeToHistory($historyGroup)
  {
    $group = HistoryGroupPeer::retrieveByName($historyGroup);
    
    $c = new Criteria();
    
    $c->add(HistoryGroupUserPeer::HISTORY_GROUP_ID, $group->getId());
    $c->add(HistoryGroupUserPeer::USER_ID, $this->getSfGuardUser()->getId());
    
    $subscription = HistoryGroupUserPeer::doSelectOne($c);
    
    if ($subscription == null)
    {
      sfContext::getInstance()->getLogger()->info('User not subscribing, subscribing now');
      $subscription = new HistoryGroupUser();
      $subscription->setHistoryGroupId($group->getId());
      $subscription->setUserId($this->getSfGuardUser()->getId());
      $subscription->save();
      return true;
    }
    
    sfContext::getInstance()->getLogger()->info('User already subscribing');
    
    return true;
  }
  
  public function getHistory($max = 5)
  {
    return HistoryEventPeer::retrieveByUser($this->getUserId(), $max);
  }

  public function createHistoryGroup()
  {
    $group = new HistoryGroup();
    $group->setName($this->getUuid().'-user-history');
    $group->save();
    
    $event = new HistoryEvent();
    $event->setHistoryGroupId($group->getId());
    $event->setTitle('History tracking created for '.$this->getFullName());
    $event->setText('You keep track of all of your recent activity via your history tracker.');
    $event->save();
    
    $this->subscribeToHistory($group->getName());
    
    return $group;
  }

  public function getHistoryGroup()
  {
    $group = HistoryGroupPeer::retrieveByName($this->getUuid().'-user-history');
    if ($group == null)
    {
      $group = $this->createHistoryGroup();
    }
    
    return $group;
  }

  public function addHistoryEvent($title, $text)
  {
    sfContext::getInstance()->getLogger()->info('grabbing user history group');
    $group = $this->getHistoryGroup();

    $event = new HistoryEvent();
    $event->setTitle($title);
    $event->setText($text);
    $event->setHistoryGroupId($group->getId());
    
    sfContext::getInstance()->getLogger()->info('adding event');    
    $event->save();

    $group->addHistoryEvent($event);
    
    $event->save();
  }
  
  public function getConnection($user_id)
  {
    $socon = null;
    
    if (sfContext::getInstance()->getUser()->isAuthenticated())
    {
      $socon = SocialConnectionPeer::retrieveByUsers($this->getUserId(), $user_id);
    }
    
    return $socon;
  }

  public function isConnected($user_id, $status = null)
  {
    if ($status == null)
    {
      //$status = sfConfig::get('app_socon_status_approved');
    }

    sfContext::getInstance()->getLogger()->info('Checking for a pre-existing socon');

    // socon == SocialConnection
    $socon = SocialConnectionPeer::retrieveByUsers($this->getUserId(), $user_id, $status);
    
    if ($socon == null)
    {
      sfContext::getInstance()->getLogger()->info('no pre-existing socon found');
      return false;
    }
    
    sfContext::getInstance()->getLogger()->info('found pre-existing socon');
    return true;
  }
  
  public function addConnection($user_id)
  {
    if ($this->isConnected($user_id))
    {
      return false;
    }
    
    $socon = new SocialConnection();
    $socon->setUser1Id($this->getUserId());
    $socon->setUser2Id($user_id);
    $socon->setStatus(sfConfig::get('app_socon_status_pending'));
    
    $socon->save();
    
    return true;
  }
  
  public function getConnections($status = null)
  {
    if ($status == null)
    {
      $status = sfConfig::get('app_socon_status_approved');
    }

    sfContext::getInstance()->getLogger()->info('Getting approved connections...');
    return SocialConnectionPeer::retrieveByUserId($this->getUserId(), $status);
  }
  
  public function getPendingConnections()
  {
    return SocialConnectionPeer::retrievePendingByUserId($this->getUserId());
  }
  
  public function getApprovableConnections()
  {
    return SocialConnectionPeer::retrieveApprovableByUserId($this->getUserId());
  }

  public function getAllPendingConnections()
  {
    $status = sfConfig::get('app_socon_status_pending');
    return SocialConnectionPeer::retrieveByUserId($this->getUserId(), $status);
  }
  
  public function checkPrivacyLevel($level)
  {
    if ($this->getPrivacyLevel() == $level) return true;
    
    return false;
  }
}
